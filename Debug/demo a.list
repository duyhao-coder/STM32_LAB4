
demo a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf8  08003cf8  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf8  08003cf8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200000a4  08003da4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08003da4  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad9f  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  0002ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001720e  00000000  00000000  0002e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef1  00000000  00000000  0004527e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082cc6  00000000  00000000  0005216f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  000d4e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cbc 	.word	0x08003cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08003cbc 	.word	0x08003cbc

0800014c <isButton1Pressed>:
int button2_pressed = 0;
int button3_pressed = 0;


int isButton1Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c0 	.word	0x200000c0

08000170 <isButton2Pressed>:
int isButton2Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000c4 	.word	0x200000c4

08000194 <isButton3Pressed>:
int isButton3Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000c8 	.word	0x200000c8

080001b8 <getKeyInput>:
	}
	else return 0;
}

void getKeyInput()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e11d      	b.n	8000400 <getKeyInput+0x248>
		keyReg0[i] = keyReg1[i];
 80001c4:	4a93      	ldr	r2, [pc, #588]	; (8000414 <getKeyInput+0x25c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4992      	ldr	r1, [pc, #584]	; (8000418 <getKeyInput+0x260>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001d4:	4a91      	ldr	r2, [pc, #580]	; (800041c <getKeyInput+0x264>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	498d      	ldr	r1, [pc, #564]	; (8000414 <getKeyInput+0x25c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d155      	bne.n	8000296 <getKeyInput+0xde>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	488c      	ldr	r0, [pc, #560]	; (8000420 <getKeyInput+0x268>)
 80001f0:	f002 fd50 	bl	8002c94 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a88      	ldr	r2, [pc, #544]	; (800041c <getKeyInput+0x264>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000200:	4a85      	ldr	r2, [pc, #532]	; (8000418 <getKeyInput+0x260>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4982      	ldr	r1, [pc, #520]	; (8000414 <getKeyInput+0x25c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d140      	bne.n	8000296 <getKeyInput+0xde>
 8000214:	4a7f      	ldr	r2, [pc, #508]	; (8000414 <getKeyInput+0x25c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	497f      	ldr	r1, [pc, #508]	; (800041c <getKeyInput+0x264>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d136      	bne.n	8000296 <getKeyInput+0xde>
			{
				if(keyReg3[i] != keyReg2[i])
 8000228:	4a7e      	ldr	r2, [pc, #504]	; (8000424 <getKeyInput+0x26c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	497a      	ldr	r1, [pc, #488]	; (800041c <getKeyInput+0x264>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d014      	beq.n	8000266 <getKeyInput+0xae>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800023c:	4a77      	ldr	r2, [pc, #476]	; (800041c <getKeyInput+0x264>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4977      	ldr	r1, [pc, #476]	; (8000424 <getKeyInput+0x26c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800024c:	4a73      	ldr	r2, [pc, #460]	; (800041c <getKeyInput+0x264>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d11e      	bne.n	8000296 <getKeyInput+0xde>
					{
						//TODO
						button1_flag = 1;
 8000258:	4b73      	ldr	r3, [pc, #460]	; (8000428 <getKeyInput+0x270>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 800025e:	4b73      	ldr	r3, [pc, #460]	; (800042c <getKeyInput+0x274>)
 8000260:	2264      	movs	r2, #100	; 0x64
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e017      	b.n	8000296 <getKeyInput+0xde>
					}
				}
				else
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000266:	4a6d      	ldr	r2, [pc, #436]	; (800041c <getKeyInput+0x264>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d111      	bne.n	8000296 <getKeyInput+0xde>
						timerForKeyPress--;
 8000272:	4b6e      	ldr	r3, [pc, #440]	; (800042c <getKeyInput+0x274>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3b01      	subs	r3, #1
 8000278:	4a6c      	ldr	r2, [pc, #432]	; (800042c <getKeyInput+0x274>)
 800027a:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800027c:	4b6b      	ldr	r3, [pc, #428]	; (800042c <getKeyInput+0x274>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d108      	bne.n	8000296 <getKeyInput+0xde>
						{
							//TODO
							button1_flag = 1;
 8000284:	4b68      	ldr	r3, [pc, #416]	; (8000428 <getKeyInput+0x270>)
 8000286:	2201      	movs	r2, #1
 8000288:	601a      	str	r2, [r3, #0]
							button1_pressed = 1;
 800028a:	4b69      	ldr	r3, [pc, #420]	; (8000430 <getKeyInput+0x278>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 100;
 8000290:	4b66      	ldr	r3, [pc, #408]	; (800042c <getKeyInput+0x274>)
 8000292:	2264      	movs	r2, #100	; 0x64
 8000294:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
		}
		if(i == 1){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d155      	bne.n	8000348 <getKeyInput+0x190>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	485f      	ldr	r0, [pc, #380]	; (8000420 <getKeyInput+0x268>)
 80002a2:	f002 fcf7 	bl	8002c94 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4619      	mov	r1, r3
 80002aa:	4a5c      	ldr	r2, [pc, #368]	; (800041c <getKeyInput+0x264>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002b2:	4a59      	ldr	r2, [pc, #356]	; (8000418 <getKeyInput+0x260>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ba:	4956      	ldr	r1, [pc, #344]	; (8000414 <getKeyInput+0x25c>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d140      	bne.n	8000348 <getKeyInput+0x190>
 80002c6:	4a53      	ldr	r2, [pc, #332]	; (8000414 <getKeyInput+0x25c>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ce:	4953      	ldr	r1, [pc, #332]	; (800041c <getKeyInput+0x264>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d136      	bne.n	8000348 <getKeyInput+0x190>
			{
				if(keyReg3[i] != keyReg2[i])
 80002da:	4a52      	ldr	r2, [pc, #328]	; (8000424 <getKeyInput+0x26c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e2:	494e      	ldr	r1, [pc, #312]	; (800041c <getKeyInput+0x264>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d014      	beq.n	8000318 <getKeyInput+0x160>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 80002ee:	4a4b      	ldr	r2, [pc, #300]	; (800041c <getKeyInput+0x264>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	494b      	ldr	r1, [pc, #300]	; (8000424 <getKeyInput+0x26c>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80002fe:	4a47      	ldr	r2, [pc, #284]	; (800041c <getKeyInput+0x264>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d11e      	bne.n	8000348 <getKeyInput+0x190>
					{
						//TODO
						button2_flag = 1;
 800030a:	4b4a      	ldr	r3, [pc, #296]	; (8000434 <getKeyInput+0x27c>)
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 8000310:	4b46      	ldr	r3, [pc, #280]	; (800042c <getKeyInput+0x274>)
 8000312:	2264      	movs	r2, #100	; 0x64
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	e017      	b.n	8000348 <getKeyInput+0x190>
					}
				}
				else
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000318:	4a40      	ldr	r2, [pc, #256]	; (800041c <getKeyInput+0x264>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d111      	bne.n	8000348 <getKeyInput+0x190>
						timerForKeyPress--;
 8000324:	4b41      	ldr	r3, [pc, #260]	; (800042c <getKeyInput+0x274>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	4a40      	ldr	r2, [pc, #256]	; (800042c <getKeyInput+0x274>)
 800032c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800032e:	4b3f      	ldr	r3, [pc, #252]	; (800042c <getKeyInput+0x274>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d108      	bne.n	8000348 <getKeyInput+0x190>
						{
							//TODO
							button2_flag = 1;
 8000336:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <getKeyInput+0x27c>)
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
							button2_pressed = 1;
 800033c:	4b3e      	ldr	r3, [pc, #248]	; (8000438 <getKeyInput+0x280>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 100;
 8000342:	4b3a      	ldr	r3, [pc, #232]	; (800042c <getKeyInput+0x274>)
 8000344:	2264      	movs	r2, #100	; 0x64
 8000346:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
		}
		if(i == 2){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d155      	bne.n	80003fa <getKeyInput+0x242>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	4833      	ldr	r0, [pc, #204]	; (8000420 <getKeyInput+0x268>)
 8000354:	f002 fc9e 	bl	8002c94 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	4619      	mov	r1, r3
 800035c:	4a2f      	ldr	r2, [pc, #188]	; (800041c <getKeyInput+0x264>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000364:	4a2c      	ldr	r2, [pc, #176]	; (8000418 <getKeyInput+0x260>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036c:	4929      	ldr	r1, [pc, #164]	; (8000414 <getKeyInput+0x25c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000374:	429a      	cmp	r2, r3
 8000376:	d140      	bne.n	80003fa <getKeyInput+0x242>
 8000378:	4a26      	ldr	r2, [pc, #152]	; (8000414 <getKeyInput+0x25c>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000380:	4926      	ldr	r1, [pc, #152]	; (800041c <getKeyInput+0x264>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000388:	429a      	cmp	r2, r3
 800038a:	d136      	bne.n	80003fa <getKeyInput+0x242>
			{
				if(keyReg3[i] != keyReg2[i])
 800038c:	4a25      	ldr	r2, [pc, #148]	; (8000424 <getKeyInput+0x26c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000394:	4921      	ldr	r1, [pc, #132]	; (800041c <getKeyInput+0x264>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039c:	429a      	cmp	r2, r3
 800039e:	d014      	beq.n	80003ca <getKeyInput+0x212>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003a0:	4a1e      	ldr	r2, [pc, #120]	; (800041c <getKeyInput+0x264>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a8:	491e      	ldr	r1, [pc, #120]	; (8000424 <getKeyInput+0x26c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003b0:	4a1a      	ldr	r2, [pc, #104]	; (800041c <getKeyInput+0x264>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d11e      	bne.n	80003fa <getKeyInput+0x242>
					{
						button3_flag = 1;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <getKeyInput+0x284>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 100;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <getKeyInput+0x274>)
 80003c4:	2264      	movs	r2, #100	; 0x64
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	e017      	b.n	80003fa <getKeyInput+0x242>
					}
				}
				else
				{
					if(keyReg2[i] == PRESSED_STATE){
 80003ca:	4a14      	ldr	r2, [pc, #80]	; (800041c <getKeyInput+0x264>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d111      	bne.n	80003fa <getKeyInput+0x242>
						timerForKeyPress--;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <getKeyInput+0x274>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <getKeyInput+0x274>)
 80003de:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <getKeyInput+0x274>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d108      	bne.n	80003fa <getKeyInput+0x242>
						{
							button3_flag = 1;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <getKeyInput+0x284>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	601a      	str	r2, [r3, #0]
							button3_pressed = 1;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <getKeyInput+0x288>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 100;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <getKeyInput+0x274>)
 80003f6:	2264      	movs	r2, #100	; 0x64
 80003f8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3301      	adds	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b02      	cmp	r3, #2
 8000404:	f77f aede 	ble.w	80001c4 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000000c 	.word	0x2000000c
 8000418:	20000000 	.word	0x20000000
 800041c:	20000018 	.word	0x20000018
 8000420:	40010c00 	.word	0x40010c00
 8000424:	20000024 	.word	0x20000024
 8000428:	200000c0 	.word	0x200000c0
 800042c:	20000030 	.word	0x20000030
 8000430:	200000cc 	.word	0x200000cc
 8000434:	200000c4 	.word	0x200000c4
 8000438:	200000d0 	.word	0x200000d0
 800043c:	200000c8 	.word	0x200000c8
 8000440:	200000d4 	.word	0x200000d4

08000444 <update_buffer_1>:





void update_buffer_1() {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    if (counter2_1 < 10) {
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <update_buffer_1+0xac>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b09      	cmp	r3, #9
 800044e:	dc06      	bgt.n	800045e <update_buffer_1+0x1a>
        led_buffer_2_1[0] = 0; // Phần chục
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <update_buffer_1+0xb0>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
        led_buffer_2_1[1] = counter2_1; // Phần đơn vị
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <update_buffer_1+0xac>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a26      	ldr	r2, [pc, #152]	; (80004f4 <update_buffer_1+0xb0>)
 800045c:	6053      	str	r3, [r2, #4]
    } if (counter2_1 >= 10) {
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <update_buffer_1+0xac>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b09      	cmp	r3, #9
 8000464:	dd18      	ble.n	8000498 <update_buffer_1+0x54>
        led_buffer_2_1[0] = counter2_1 / 10; // Phần chục
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <update_buffer_1+0xac>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <update_buffer_1+0xb4>)
 800046c:	fb82 1203 	smull	r1, r2, r2, r3
 8000470:	1092      	asrs	r2, r2, #2
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <update_buffer_1+0xb0>)
 8000478:	6013      	str	r3, [r2, #0]
        led_buffer_2_1[1] = counter2_1 % 10; // Phần đơn vị
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <update_buffer_1+0xac>)
 800047c:	6819      	ldr	r1, [r3, #0]
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <update_buffer_1+0xb4>)
 8000480:	fb83 2301 	smull	r2, r3, r3, r1
 8000484:	109a      	asrs	r2, r3, #2
 8000486:	17cb      	asrs	r3, r1, #31
 8000488:	1ad2      	subs	r2, r2, r3
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	1aca      	subs	r2, r1, r3
 8000494:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <update_buffer_1+0xb0>)
 8000496:	605a      	str	r2, [r3, #4]
    }
    if (counter1_1 < 10) {
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <update_buffer_1+0xb8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b09      	cmp	r3, #9
 800049e:	dc06      	bgt.n	80004ae <update_buffer_1+0x6a>
         led_buffer_1_1[0] = 0; // Phần chục
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <update_buffer_1+0xbc>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
         led_buffer_1_1[1] = counter1_1; // Phần đơn vị
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <update_buffer_1+0xb8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a15      	ldr	r2, [pc, #84]	; (8000500 <update_buffer_1+0xbc>)
 80004ac:	6053      	str	r3, [r2, #4]
     } if (counter1_1 >= 10) {
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <update_buffer_1+0xb8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b09      	cmp	r3, #9
 80004b4:	dd18      	ble.n	80004e8 <update_buffer_1+0xa4>
    	 led_buffer_1_1[0] = counter1_1 / 10; // Phần chục
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <update_buffer_1+0xb8>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <update_buffer_1+0xb4>)
 80004bc:	fb82 1203 	smull	r1, r2, r2, r3
 80004c0:	1092      	asrs	r2, r2, #2
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <update_buffer_1+0xbc>)
 80004c8:	6013      	str	r3, [r2, #0]
    	 led_buffer_1_1[1] = counter1_1 % 10; // Phần đơn vị
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <update_buffer_1+0xb8>)
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <update_buffer_1+0xb4>)
 80004d0:	fb83 2301 	smull	r2, r3, r3, r1
 80004d4:	109a      	asrs	r2, r3, #2
 80004d6:	17cb      	asrs	r3, r1, #31
 80004d8:	1ad2      	subs	r2, r2, r3
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	1aca      	subs	r2, r1, r3
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <update_buffer_1+0xbc>)
 80004e6:	605a      	str	r2, [r3, #4]
     }
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20000034 	.word	0x20000034
 80004f4:	20000104 	.word	0x20000104
 80004f8:	66666667 	.word	0x66666667
 80004fc:	20000040 	.word	0x20000040
 8000500:	2000011c 	.word	0x2000011c

08000504 <update_buffer_2>:
void update_buffer_2(){
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
    if (counter2_2 < 10) {
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <update_buffer_2+0xac>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b09      	cmp	r3, #9
 800050e:	dc06      	bgt.n	800051e <update_buffer_2+0x1a>
         led_buffer_2_2[0] = 0; // Phần chục
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <update_buffer_2+0xb0>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
         led_buffer_2_2[1] = counter2_2; // Phần đơn vị
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <update_buffer_2+0xac>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <update_buffer_2+0xb0>)
 800051c:	6053      	str	r3, [r2, #4]
     }  if (counter2_2 >= 10) {
 800051e:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <update_buffer_2+0xac>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b09      	cmp	r3, #9
 8000524:	dd18      	ble.n	8000558 <update_buffer_2+0x54>
         led_buffer_2_2[0] = counter2_2 / 10; // Phần chục
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <update_buffer_2+0xac>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a23      	ldr	r2, [pc, #140]	; (80005b8 <update_buffer_2+0xb4>)
 800052c:	fb82 1203 	smull	r1, r2, r2, r3
 8000530:	1092      	asrs	r2, r2, #2
 8000532:	17db      	asrs	r3, r3, #31
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <update_buffer_2+0xb0>)
 8000538:	6013      	str	r3, [r2, #0]
         led_buffer_2_2[1] = counter2_2 % 10; // Phần đơn vị
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <update_buffer_2+0xac>)
 800053c:	6819      	ldr	r1, [r3, #0]
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <update_buffer_2+0xb4>)
 8000540:	fb83 2301 	smull	r2, r3, r3, r1
 8000544:	109a      	asrs	r2, r3, #2
 8000546:	17cb      	asrs	r3, r1, #31
 8000548:	1ad2      	subs	r2, r2, r3
 800054a:	4613      	mov	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	1aca      	subs	r2, r1, r3
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <update_buffer_2+0xb0>)
 8000556:	605a      	str	r2, [r3, #4]
     }
     if (counter1_2 < 10) {
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <update_buffer_2+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b09      	cmp	r3, #9
 800055e:	dc06      	bgt.n	800056e <update_buffer_2+0x6a>
            led_buffer_1_2[0] = 0; // Phần chục
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <update_buffer_2+0xbc>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
            led_buffer_1_2[1] = counter1_2; // Phần đơn vị
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <update_buffer_2+0xb8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <update_buffer_2+0xbc>)
 800056c:	6053      	str	r3, [r2, #4]
        }  if (counter1_2 >= 10) {
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <update_buffer_2+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b09      	cmp	r3, #9
 8000574:	dd18      	ble.n	80005a8 <update_buffer_2+0xa4>
        	led_buffer_1_2[0] = counter1_2 / 10; // Phần chục
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <update_buffer_2+0xb8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <update_buffer_2+0xb4>)
 800057c:	fb82 1203 	smull	r1, r2, r2, r3
 8000580:	1092      	asrs	r2, r2, #2
 8000582:	17db      	asrs	r3, r3, #31
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <update_buffer_2+0xbc>)
 8000588:	6013      	str	r3, [r2, #0]
        	led_buffer_1_2[1] = counter1_2 % 10; // Phần đơn vị
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <update_buffer_2+0xb8>)
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <update_buffer_2+0xb4>)
 8000590:	fb83 2301 	smull	r2, r3, r3, r1
 8000594:	109a      	asrs	r2, r3, #2
 8000596:	17cb      	asrs	r3, r1, #31
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	1aca      	subs	r2, r1, r3
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <update_buffer_2+0xbc>)
 80005a6:	605a      	str	r2, [r3, #4]
        }
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000038 	.word	0x20000038
 80005b4:	2000010c 	.word	0x2000010c
 80005b8:	66666667 	.word	0x66666667
 80005bc:	20000044 	.word	0x20000044
 80005c0:	20000124 	.word	0x20000124

080005c4 <update_buffer_3>:
void update_buffer_3(){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

     if (counter2_3 < 10) {
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <update_buffer_3+0xac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	dc06      	bgt.n	80005de <update_buffer_3+0x1a>
          led_buffer_2_3[0] = 0; // Phần chục
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <update_buffer_3+0xb0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
          led_buffer_2_3[1] = counter2_3; // Phần đơn vị
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <update_buffer_3+0xac>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a26      	ldr	r2, [pc, #152]	; (8000674 <update_buffer_3+0xb0>)
 80005dc:	6053      	str	r3, [r2, #4]
      }  if (counter2_3 >= 10) {
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <update_buffer_3+0xac>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b09      	cmp	r3, #9
 80005e4:	dd18      	ble.n	8000618 <update_buffer_3+0x54>
          led_buffer_2_3[0] = counter2_3 / 10; // Phần chục
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <update_buffer_3+0xac>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <update_buffer_3+0xb4>)
 80005ec:	fb82 1203 	smull	r1, r2, r2, r3
 80005f0:	1092      	asrs	r2, r2, #2
 80005f2:	17db      	asrs	r3, r3, #31
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	4a1f      	ldr	r2, [pc, #124]	; (8000674 <update_buffer_3+0xb0>)
 80005f8:	6013      	str	r3, [r2, #0]
          led_buffer_2_3[1] = counter2_3 % 10; // Phần đơn vị
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <update_buffer_3+0xac>)
 80005fc:	6819      	ldr	r1, [r3, #0]
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <update_buffer_3+0xb4>)
 8000600:	fb83 2301 	smull	r2, r3, r3, r1
 8000604:	109a      	asrs	r2, r3, #2
 8000606:	17cb      	asrs	r3, r1, #31
 8000608:	1ad2      	subs	r2, r2, r3
 800060a:	4613      	mov	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	1aca      	subs	r2, r1, r3
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <update_buffer_3+0xb0>)
 8000616:	605a      	str	r2, [r3, #4]
      }
      if (counter1_3 < 10) {
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <update_buffer_3+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b09      	cmp	r3, #9
 800061e:	dc06      	bgt.n	800062e <update_buffer_3+0x6a>
             led_buffer_1_3[0] = 0; // Phần chục
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <update_buffer_3+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
             led_buffer_1_3[1] = counter1_3; // Phần đơn vị
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <update_buffer_3+0xb8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <update_buffer_3+0xbc>)
 800062c:	6053      	str	r3, [r2, #4]
         }  if (counter1_3 >= 10) {
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <update_buffer_3+0xb8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b09      	cmp	r3, #9
 8000634:	dd18      	ble.n	8000668 <update_buffer_3+0xa4>
        	 led_buffer_1_3[0] = counter1_3 / 10; // Phần chục
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <update_buffer_3+0xb8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <update_buffer_3+0xb4>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1092      	asrs	r2, r2, #2
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <update_buffer_3+0xbc>)
 8000648:	6013      	str	r3, [r2, #0]
        	 led_buffer_1_3[1] = counter1_3 % 10; // Phần đơn vị
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <update_buffer_3+0xb8>)
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <update_buffer_3+0xb4>)
 8000650:	fb83 2301 	smull	r2, r3, r3, r1
 8000654:	109a      	asrs	r2, r3, #2
 8000656:	17cb      	asrs	r3, r1, #31
 8000658:	1ad2      	subs	r2, r2, r3
 800065a:	4613      	mov	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1aca      	subs	r2, r1, r3
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <update_buffer_3+0xbc>)
 8000666:	605a      	str	r2, [r3, #4]
         }
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000003c 	.word	0x2000003c
 8000674:	20000114 	.word	0x20000114
 8000678:	66666667 	.word	0x66666667
 800067c:	20000048 	.word	0x20000048
 8000680:	2000012c 	.word	0x2000012c

08000684 <update_led7_1_1>:

void update_led7_1_1(int index)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	switch(index){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <update_led7_1_1+0x16>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d012      	beq.n	80006be <update_led7_1_1+0x3a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG_1(led_buffer_1_1[1]);
		break;
	default:
		break;
 8000698:	e023      	b.n	80006e2 <update_led7_1_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <update_led7_1_1+0x68>)
 80006a2:	f002 fb0e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	480f      	ldr	r0, [pc, #60]	; (80006ec <update_led7_1_1+0x68>)
 80006ae:	f002 fb08 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_1[0]);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <update_led7_1_1+0x6c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f934 	bl	8000924 <display7SEG_1>
		break;
 80006bc:	e011      	b.n	80006e2 <update_led7_1_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <update_led7_1_1+0x68>)
 80006c6:	f002 fafc 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <update_led7_1_1+0x68>)
 80006d2:	f002 faf6 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_1[1]);
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <update_led7_1_1+0x6c>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f922 	bl	8000924 <display7SEG_1>
		break;
 80006e0:	bf00      	nop
	}
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	2000011c 	.word	0x2000011c

080006f4 <update_led7_1_2>:
void update_led7_1_2(int index)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	switch(index){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <update_led7_1_2+0x16>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d012      	beq.n	800072e <update_led7_1_2+0x3a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG_1(led_buffer_1_2[1]);
		break;
	default:
		break;
 8000708:	e023      	b.n	8000752 <update_led7_1_2+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <update_led7_1_2+0x68>)
 8000712:	f002 fad6 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	480f      	ldr	r0, [pc, #60]	; (800075c <update_led7_1_2+0x68>)
 800071e:	f002 fad0 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_2[0]);
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <update_led7_1_2+0x6c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f8fc 	bl	8000924 <display7SEG_1>
		break;
 800072c:	e011      	b.n	8000752 <update_led7_1_2+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <update_led7_1_2+0x68>)
 8000736:	f002 fac4 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <update_led7_1_2+0x68>)
 8000742:	f002 fabe 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_2[1]);
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <update_led7_1_2+0x6c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f8ea 	bl	8000924 <display7SEG_1>
		break;
 8000750:	bf00      	nop
	}
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40010c00 	.word	0x40010c00
 8000760:	20000124 	.word	0x20000124

08000764 <update_led7_1_3>:
void update_led7_1_3(int index)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	switch(index){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <update_led7_1_3+0x16>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d012      	beq.n	800079e <update_led7_1_3+0x3a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG_1(led_buffer_1_3[1]);
		break;
	default:
		break;
 8000778:	e023      	b.n	80007c2 <update_led7_1_3+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <update_led7_1_3+0x68>)
 8000782:	f002 fa9e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <update_led7_1_3+0x68>)
 800078e:	f002 fa98 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_3[0]);
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <update_led7_1_3+0x6c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8c4 	bl	8000924 <display7SEG_1>
		break;
 800079c:	e011      	b.n	80007c2 <update_led7_1_3+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <update_led7_1_3+0x68>)
 80007a6:	f002 fa8c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <update_led7_1_3+0x68>)
 80007b2:	f002 fa86 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer_1_3[1]);
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <update_led7_1_3+0x6c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8b2 	bl	8000924 <display7SEG_1>
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	2000012c 	.word	0x2000012c

080007d4 <update_led7_2_2>:


void update_led7_2_2(int index)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	switch(index){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <update_led7_2_2+0x16>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d012      	beq.n	800080e <update_led7_2_2+0x3a>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG_2(led_buffer_2_2[1]);
	default:
		break;
 80007e8:	e022      	b.n	8000830 <update_led7_2_2+0x5c>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <update_led7_2_2+0x68>)
 80007f2:	f002 fa66 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <update_led7_2_2+0x68>)
 80007fe:	f002 fa60 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_2[0]);
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <update_led7_2_2+0x6c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa1a 	bl	8000c40 <display7SEG_2>
		break;
 800080c:	e011      	b.n	8000832 <update_led7_2_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <update_led7_2_2+0x68>)
 8000816:	f002 fa54 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <update_led7_2_2+0x68>)
 8000822:	f002 fa4e 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_2[1]);
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <update_led7_2_2+0x6c>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fa08 	bl	8000c40 <display7SEG_2>
		break;
 8000830:	bf00      	nop
	}
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010c00 	.word	0x40010c00
 8000840:	2000010c 	.word	0x2000010c

08000844 <update_led7_2_1>:
void update_led7_2_1(int index)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	switch(index){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <update_led7_2_1+0x16>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d012      	beq.n	800087e <update_led7_2_1+0x3a>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG_2(led_buffer_2_1[1]);
	default:
		break;
 8000858:	e022      	b.n	80008a0 <update_led7_2_1+0x5c>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <update_led7_2_1+0x68>)
 8000862:	f002 fa2e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086c:	480f      	ldr	r0, [pc, #60]	; (80008ac <update_led7_2_1+0x68>)
 800086e:	f002 fa28 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_1[0]);
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <update_led7_2_1+0x6c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f9e2 	bl	8000c40 <display7SEG_2>
		break;
 800087c:	e011      	b.n	80008a2 <update_led7_2_1+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <update_led7_2_1+0x68>)
 8000886:	f002 fa1c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <update_led7_2_1+0x68>)
 8000892:	f002 fa16 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_1[1]);
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <update_led7_2_1+0x6c>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f9d0 	bl	8000c40 <display7SEG_2>
		break;
 80008a0:	bf00      	nop
	}
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	20000104 	.word	0x20000104

080008b4 <update_led7_2_3>:
void update_led7_2_3(int index)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	switch(index){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <update_led7_2_3+0x16>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d012      	beq.n	80008ee <update_led7_2_3+0x3a>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG_2(led_buffer_2_3[1]);
	default:
		break;
 80008c8:	e022      	b.n	8000910 <update_led7_2_3+0x5c>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <update_led7_2_3+0x68>)
 80008d2:	f002 f9f6 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <update_led7_2_3+0x68>)
 80008de:	f002 f9f0 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_3[0]);
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <update_led7_2_3+0x6c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f9aa 	bl	8000c40 <display7SEG_2>
		break;
 80008ec:	e011      	b.n	8000912 <update_led7_2_3+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <update_led7_2_3+0x68>)
 80008f6:	f002 f9e4 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <update_led7_2_3+0x68>)
 8000902:	f002 f9de 	bl	8002cc2 <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer_2_3[1]);
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <update_led7_2_3+0x6c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f998 	bl	8000c40 <display7SEG_2>
		break;
 8000910:	bf00      	nop
	}
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010c00 	.word	0x40010c00
 8000920:	20000114 	.word	0x20000114

08000924 <display7SEG_1>:


void display7SEG_1(int num)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b09      	cmp	r3, #9
 8000930:	f200 8180 	bhi.w	8000c34 <display7SEG_1+0x310>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <display7SEG_1+0x18>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	08000965 	.word	0x08000965
 8000940:	080009ad 	.word	0x080009ad
 8000944:	080009f5 	.word	0x080009f5
 8000948:	08000a3d 	.word	0x08000a3d
 800094c:	08000a85 	.word	0x08000a85
 8000950:	08000acd 	.word	0x08000acd
 8000954:	08000b15 	.word	0x08000b15
 8000958:	08000b5d 	.word	0x08000b5d
 800095c:	08000ba5 	.word	0x08000ba5
 8000960:	08000bed 	.word	0x08000bed
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	48b4      	ldr	r0, [pc, #720]	; (8000c3c <display7SEG_1+0x318>)
 800096a:	f002 f9aa 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	48b2      	ldr	r0, [pc, #712]	; (8000c3c <display7SEG_1+0x318>)
 8000974:	f002 f9a5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2104      	movs	r1, #4
 800097c:	48af      	ldr	r0, [pc, #700]	; (8000c3c <display7SEG_1+0x318>)
 800097e:	f002 f9a0 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	48ad      	ldr	r0, [pc, #692]	; (8000c3c <display7SEG_1+0x318>)
 8000988:	f002 f99b 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	48aa      	ldr	r0, [pc, #680]	; (8000c3c <display7SEG_1+0x318>)
 8000992:	f002 f996 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	48a8      	ldr	r0, [pc, #672]	; (8000c3c <display7SEG_1+0x318>)
 800099c:	f002 f991 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	48a5      	ldr	r0, [pc, #660]	; (8000c3c <display7SEG_1+0x318>)
 80009a6:	f002 f98c 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 80009aa:	e143      	b.n	8000c34 <display7SEG_1+0x310>
	case 1:


		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	48a2      	ldr	r0, [pc, #648]	; (8000c3c <display7SEG_1+0x318>)
 80009b2:	f002 f986 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	48a0      	ldr	r0, [pc, #640]	; (8000c3c <display7SEG_1+0x318>)
 80009bc:	f002 f981 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	489d      	ldr	r0, [pc, #628]	; (8000c3c <display7SEG_1+0x318>)
 80009c6:	f002 f97c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	489b      	ldr	r0, [pc, #620]	; (8000c3c <display7SEG_1+0x318>)
 80009d0:	f002 f977 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4898      	ldr	r0, [pc, #608]	; (8000c3c <display7SEG_1+0x318>)
 80009da:	f002 f972 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	4896      	ldr	r0, [pc, #600]	; (8000c3c <display7SEG_1+0x318>)
 80009e4:	f002 f96d 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4893      	ldr	r0, [pc, #588]	; (8000c3c <display7SEG_1+0x318>)
 80009ee:	f002 f968 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 80009f2:	e11f      	b.n	8000c34 <display7SEG_1+0x310>

	case 2:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4890      	ldr	r0, [pc, #576]	; (8000c3c <display7SEG_1+0x318>)
 80009fa:	f002 f962 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2102      	movs	r1, #2
 8000a02:	488e      	ldr	r0, [pc, #568]	; (8000c3c <display7SEG_1+0x318>)
 8000a04:	f002 f95d 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	488b      	ldr	r0, [pc, #556]	; (8000c3c <display7SEG_1+0x318>)
 8000a0e:	f002 f958 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2108      	movs	r1, #8
 8000a16:	4889      	ldr	r0, [pc, #548]	; (8000c3c <display7SEG_1+0x318>)
 8000a18:	f002 f953 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4886      	ldr	r0, [pc, #536]	; (8000c3c <display7SEG_1+0x318>)
 8000a22:	f002 f94e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4884      	ldr	r0, [pc, #528]	; (8000c3c <display7SEG_1+0x318>)
 8000a2c:	f002 f949 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4881      	ldr	r0, [pc, #516]	; (8000c3c <display7SEG_1+0x318>)
 8000a36:	f002 f944 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000a3a:	e0fb      	b.n	8000c34 <display7SEG_1+0x310>

	case 3:


		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	487e      	ldr	r0, [pc, #504]	; (8000c3c <display7SEG_1+0x318>)
 8000a42:	f002 f93e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	487c      	ldr	r0, [pc, #496]	; (8000c3c <display7SEG_1+0x318>)
 8000a4c:	f002 f939 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	4879      	ldr	r0, [pc, #484]	; (8000c3c <display7SEG_1+0x318>)
 8000a56:	f002 f934 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4877      	ldr	r0, [pc, #476]	; (8000c3c <display7SEG_1+0x318>)
 8000a60:	f002 f92f 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2110      	movs	r1, #16
 8000a68:	4874      	ldr	r0, [pc, #464]	; (8000c3c <display7SEG_1+0x318>)
 8000a6a:	f002 f92a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	4872      	ldr	r0, [pc, #456]	; (8000c3c <display7SEG_1+0x318>)
 8000a74:	f002 f925 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	486f      	ldr	r0, [pc, #444]	; (8000c3c <display7SEG_1+0x318>)
 8000a7e:	f002 f920 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000a82:	e0d7      	b.n	8000c34 <display7SEG_1+0x310>

	case 4:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	486c      	ldr	r0, [pc, #432]	; (8000c3c <display7SEG_1+0x318>)
 8000a8a:	f002 f91a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	486a      	ldr	r0, [pc, #424]	; (8000c3c <display7SEG_1+0x318>)
 8000a94:	f002 f915 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4867      	ldr	r0, [pc, #412]	; (8000c3c <display7SEG_1+0x318>)
 8000a9e:	f002 f910 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4865      	ldr	r0, [pc, #404]	; (8000c3c <display7SEG_1+0x318>)
 8000aa8:	f002 f90b 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4862      	ldr	r0, [pc, #392]	; (8000c3c <display7SEG_1+0x318>)
 8000ab2:	f002 f906 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4860      	ldr	r0, [pc, #384]	; (8000c3c <display7SEG_1+0x318>)
 8000abc:	f002 f901 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	485d      	ldr	r0, [pc, #372]	; (8000c3c <display7SEG_1+0x318>)
 8000ac6:	f002 f8fc 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000aca:	e0b3      	b.n	8000c34 <display7SEG_1+0x310>

	case 5:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2101      	movs	r1, #1
 8000ad0:	485a      	ldr	r0, [pc, #360]	; (8000c3c <display7SEG_1+0x318>)
 8000ad2:	f002 f8f6 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4858      	ldr	r0, [pc, #352]	; (8000c3c <display7SEG_1+0x318>)
 8000adc:	f002 f8f1 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4855      	ldr	r0, [pc, #340]	; (8000c3c <display7SEG_1+0x318>)
 8000ae6:	f002 f8ec 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	4853      	ldr	r0, [pc, #332]	; (8000c3c <display7SEG_1+0x318>)
 8000af0:	f002 f8e7 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2110      	movs	r1, #16
 8000af8:	4850      	ldr	r0, [pc, #320]	; (8000c3c <display7SEG_1+0x318>)
 8000afa:	f002 f8e2 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	484e      	ldr	r0, [pc, #312]	; (8000c3c <display7SEG_1+0x318>)
 8000b04:	f002 f8dd 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	484b      	ldr	r0, [pc, #300]	; (8000c3c <display7SEG_1+0x318>)
 8000b0e:	f002 f8d8 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000b12:	e08f      	b.n	8000c34 <display7SEG_1+0x310>

	case 6:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	4848      	ldr	r0, [pc, #288]	; (8000c3c <display7SEG_1+0x318>)
 8000b1a:	f002 f8d2 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	4846      	ldr	r0, [pc, #280]	; (8000c3c <display7SEG_1+0x318>)
 8000b24:	f002 f8cd 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4843      	ldr	r0, [pc, #268]	; (8000c3c <display7SEG_1+0x318>)
 8000b2e:	f002 f8c8 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	4841      	ldr	r0, [pc, #260]	; (8000c3c <display7SEG_1+0x318>)
 8000b38:	f002 f8c3 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	483e      	ldr	r0, [pc, #248]	; (8000c3c <display7SEG_1+0x318>)
 8000b42:	f002 f8be 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2120      	movs	r1, #32
 8000b4a:	483c      	ldr	r0, [pc, #240]	; (8000c3c <display7SEG_1+0x318>)
 8000b4c:	f002 f8b9 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	4839      	ldr	r0, [pc, #228]	; (8000c3c <display7SEG_1+0x318>)
 8000b56:	f002 f8b4 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e06b      	b.n	8000c34 <display7SEG_1+0x310>

	case 7:


		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <display7SEG_1+0x318>)
 8000b62:	f002 f8ae 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4834      	ldr	r0, [pc, #208]	; (8000c3c <display7SEG_1+0x318>)
 8000b6c:	f002 f8a9 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2104      	movs	r1, #4
 8000b74:	4831      	ldr	r0, [pc, #196]	; (8000c3c <display7SEG_1+0x318>)
 8000b76:	f002 f8a4 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <display7SEG_1+0x318>)
 8000b80:	f002 f89f 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2110      	movs	r1, #16
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <display7SEG_1+0x318>)
 8000b8a:	f002 f89a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2120      	movs	r1, #32
 8000b92:	482a      	ldr	r0, [pc, #168]	; (8000c3c <display7SEG_1+0x318>)
 8000b94:	f002 f895 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	4827      	ldr	r0, [pc, #156]	; (8000c3c <display7SEG_1+0x318>)
 8000b9e:	f002 f890 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000ba2:	e047      	b.n	8000c34 <display7SEG_1+0x310>

	case 8:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4824      	ldr	r0, [pc, #144]	; (8000c3c <display7SEG_1+0x318>)
 8000baa:	f002 f88a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <display7SEG_1+0x318>)
 8000bb4:	f002 f885 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	481f      	ldr	r0, [pc, #124]	; (8000c3c <display7SEG_1+0x318>)
 8000bbe:	f002 f880 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <display7SEG_1+0x318>)
 8000bc8:	f002 f87b 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <display7SEG_1+0x318>)
 8000bd2:	f002 f876 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <display7SEG_1+0x318>)
 8000bdc:	f002 f871 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4815      	ldr	r0, [pc, #84]	; (8000c3c <display7SEG_1+0x318>)
 8000be6:	f002 f86c 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000bea:	e023      	b.n	8000c34 <display7SEG_1+0x310>

	case 9:

		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <display7SEG_1+0x318>)
 8000bf2:	f002 f866 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <display7SEG_1+0x318>)
 8000bfc:	f002 f861 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2104      	movs	r1, #4
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <display7SEG_1+0x318>)
 8000c06:	f002 f85c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <display7SEG_1+0x318>)
 8000c10:	f002 f857 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <display7SEG_1+0x318>)
 8000c1a:	f002 f852 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <display7SEG_1+0x318>)
 8000c24:	f002 f84d 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <display7SEG_1+0x318>)
 8000c2e:	f002 f848 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000c32:	bf00      	nop

	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010c00 	.word	0x40010c00

08000c40 <display7SEG_2>:
void display7SEG_2(int num)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b09      	cmp	r3, #9
 8000c4c:	f200 81b2 	bhi.w	8000fb4 <display7SEG_2+0x374>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <display7SEG_2+0x18>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000d25 	.word	0x08000d25
 8000c64:	08000d77 	.word	0x08000d77
 8000c68:	08000dc9 	.word	0x08000dc9
 8000c6c:	08000e1b 	.word	0x08000e1b
 8000c70:	08000e6d 	.word	0x08000e6d
 8000c74:	08000ebf 	.word	0x08000ebf
 8000c78:	08000f11 	.word	0x08000f11
 8000c7c:	08000f63 	.word	0x08000f63
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	48cd      	ldr	r0, [pc, #820]	; (8000fbc <display7SEG_2+0x37c>)
 8000c86:	f002 f81c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	48ca      	ldr	r0, [pc, #808]	; (8000fbc <display7SEG_2+0x37c>)
 8000c92:	f002 f816 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9c:	48c7      	ldr	r0, [pc, #796]	; (8000fbc <display7SEG_2+0x37c>)
 8000c9e:	f002 f810 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	48c4      	ldr	r0, [pc, #784]	; (8000fbc <display7SEG_2+0x37c>)
 8000caa:	f002 f80a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	48c1      	ldr	r0, [pc, #772]	; (8000fbc <display7SEG_2+0x37c>)
 8000cb6:	f002 f804 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc0:	48be      	ldr	r0, [pc, #760]	; (8000fbc <display7SEG_2+0x37c>)
 8000cc2:	f001 fffe 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	48bd      	ldr	r0, [pc, #756]	; (8000fc0 <display7SEG_2+0x380>)
 8000ccc:	f001 fff9 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000cd0:	e170      	b.n	8000fb4 <display7SEG_2+0x374>
	case 1:


		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	48b9      	ldr	r0, [pc, #740]	; (8000fbc <display7SEG_2+0x37c>)
 8000cd8:	f001 fff3 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce2:	48b6      	ldr	r0, [pc, #728]	; (8000fbc <display7SEG_2+0x37c>)
 8000ce4:	f001 ffed 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cee:	48b3      	ldr	r0, [pc, #716]	; (8000fbc <display7SEG_2+0x37c>)
 8000cf0:	f001 ffe7 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	48b0      	ldr	r0, [pc, #704]	; (8000fbc <display7SEG_2+0x37c>)
 8000cfc:	f001 ffe1 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	48ad      	ldr	r0, [pc, #692]	; (8000fbc <display7SEG_2+0x37c>)
 8000d08:	f001 ffdb 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d12:	48aa      	ldr	r0, [pc, #680]	; (8000fbc <display7SEG_2+0x37c>)
 8000d14:	f001 ffd5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	48a8      	ldr	r0, [pc, #672]	; (8000fc0 <display7SEG_2+0x380>)
 8000d1e:	f001 ffd0 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000d22:	e147      	b.n	8000fb4 <display7SEG_2+0x374>

	case 2:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	48a4      	ldr	r0, [pc, #656]	; (8000fbc <display7SEG_2+0x37c>)
 8000d2a:	f001 ffca 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	48a1      	ldr	r0, [pc, #644]	; (8000fbc <display7SEG_2+0x37c>)
 8000d36:	f001 ffc4 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	489e      	ldr	r0, [pc, #632]	; (8000fbc <display7SEG_2+0x37c>)
 8000d42:	f001 ffbe 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	489b      	ldr	r0, [pc, #620]	; (8000fbc <display7SEG_2+0x37c>)
 8000d4e:	f001 ffb8 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	4898      	ldr	r0, [pc, #608]	; (8000fbc <display7SEG_2+0x37c>)
 8000d5a:	f001 ffb2 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d64:	4895      	ldr	r0, [pc, #596]	; (8000fbc <display7SEG_2+0x37c>)
 8000d66:	f001 ffac 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	4894      	ldr	r0, [pc, #592]	; (8000fc0 <display7SEG_2+0x380>)
 8000d70:	f001 ffa7 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000d74:	e11e      	b.n	8000fb4 <display7SEG_2+0x374>

	case 3:


		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4890      	ldr	r0, [pc, #576]	; (8000fbc <display7SEG_2+0x37c>)
 8000d7c:	f001 ffa1 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d86:	488d      	ldr	r0, [pc, #564]	; (8000fbc <display7SEG_2+0x37c>)
 8000d88:	f001 ff9b 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d92:	488a      	ldr	r0, [pc, #552]	; (8000fbc <display7SEG_2+0x37c>)
 8000d94:	f001 ff95 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4887      	ldr	r0, [pc, #540]	; (8000fbc <display7SEG_2+0x37c>)
 8000da0:	f001 ff8f 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000daa:	4884      	ldr	r0, [pc, #528]	; (8000fbc <display7SEG_2+0x37c>)
 8000dac:	f001 ff89 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db6:	4881      	ldr	r0, [pc, #516]	; (8000fbc <display7SEG_2+0x37c>)
 8000db8:	f001 ff83 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	487f      	ldr	r0, [pc, #508]	; (8000fc0 <display7SEG_2+0x380>)
 8000dc2:	f001 ff7e 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000dc6:	e0f5      	b.n	8000fb4 <display7SEG_2+0x374>

	case 4:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	487b      	ldr	r0, [pc, #492]	; (8000fbc <display7SEG_2+0x37c>)
 8000dce:	f001 ff78 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	4878      	ldr	r0, [pc, #480]	; (8000fbc <display7SEG_2+0x37c>)
 8000dda:	f001 ff72 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de4:	4875      	ldr	r0, [pc, #468]	; (8000fbc <display7SEG_2+0x37c>)
 8000de6:	f001 ff6c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df0:	4872      	ldr	r0, [pc, #456]	; (8000fbc <display7SEG_2+0x37c>)
 8000df2:	f001 ff66 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	486f      	ldr	r0, [pc, #444]	; (8000fbc <display7SEG_2+0x37c>)
 8000dfe:	f001 ff60 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	486c      	ldr	r0, [pc, #432]	; (8000fbc <display7SEG_2+0x37c>)
 8000e0a:	f001 ff5a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	486b      	ldr	r0, [pc, #428]	; (8000fc0 <display7SEG_2+0x380>)
 8000e14:	f001 ff55 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000e18:	e0cc      	b.n	8000fb4 <display7SEG_2+0x374>

	case 5:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4867      	ldr	r0, [pc, #412]	; (8000fbc <display7SEG_2+0x37c>)
 8000e20:	f001 ff4f 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2a:	4864      	ldr	r0, [pc, #400]	; (8000fbc <display7SEG_2+0x37c>)
 8000e2c:	f001 ff49 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e36:	4861      	ldr	r0, [pc, #388]	; (8000fbc <display7SEG_2+0x37c>)
 8000e38:	f001 ff43 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e42:	485e      	ldr	r0, [pc, #376]	; (8000fbc <display7SEG_2+0x37c>)
 8000e44:	f001 ff3d 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4e:	485b      	ldr	r0, [pc, #364]	; (8000fbc <display7SEG_2+0x37c>)
 8000e50:	f001 ff37 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5a:	4858      	ldr	r0, [pc, #352]	; (8000fbc <display7SEG_2+0x37c>)
 8000e5c:	f001 ff31 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4856      	ldr	r0, [pc, #344]	; (8000fc0 <display7SEG_2+0x380>)
 8000e66:	f001 ff2c 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000e6a:	e0a3      	b.n	8000fb4 <display7SEG_2+0x374>

	case 6:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4852      	ldr	r0, [pc, #328]	; (8000fbc <display7SEG_2+0x37c>)
 8000e72:	f001 ff26 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	484f      	ldr	r0, [pc, #316]	; (8000fbc <display7SEG_2+0x37c>)
 8000e7e:	f001 ff20 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	484c      	ldr	r0, [pc, #304]	; (8000fbc <display7SEG_2+0x37c>)
 8000e8a:	f001 ff1a 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4849      	ldr	r0, [pc, #292]	; (8000fbc <display7SEG_2+0x37c>)
 8000e96:	f001 ff14 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea0:	4846      	ldr	r0, [pc, #280]	; (8000fbc <display7SEG_2+0x37c>)
 8000ea2:	f001 ff0e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	4843      	ldr	r0, [pc, #268]	; (8000fbc <display7SEG_2+0x37c>)
 8000eae:	f001 ff08 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	4842      	ldr	r0, [pc, #264]	; (8000fc0 <display7SEG_2+0x380>)
 8000eb8:	f001 ff03 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000ebc:	e07a      	b.n	8000fb4 <display7SEG_2+0x374>

	case 7:


		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2110      	movs	r1, #16
 8000ec2:	483e      	ldr	r0, [pc, #248]	; (8000fbc <display7SEG_2+0x37c>)
 8000ec4:	f001 fefd 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ece:	483b      	ldr	r0, [pc, #236]	; (8000fbc <display7SEG_2+0x37c>)
 8000ed0:	f001 fef7 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4838      	ldr	r0, [pc, #224]	; (8000fbc <display7SEG_2+0x37c>)
 8000edc:	f001 fef1 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee6:	4835      	ldr	r0, [pc, #212]	; (8000fbc <display7SEG_2+0x37c>)
 8000ee8:	f001 feeb 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef2:	4832      	ldr	r0, [pc, #200]	; (8000fbc <display7SEG_2+0x37c>)
 8000ef4:	f001 fee5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efe:	482f      	ldr	r0, [pc, #188]	; (8000fbc <display7SEG_2+0x37c>)
 8000f00:	f001 fedf 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <display7SEG_2+0x380>)
 8000f0a:	f001 feda 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000f0e:	e051      	b.n	8000fb4 <display7SEG_2+0x374>

	case 8:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2110      	movs	r1, #16
 8000f14:	4829      	ldr	r0, [pc, #164]	; (8000fbc <display7SEG_2+0x37c>)
 8000f16:	f001 fed4 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	4826      	ldr	r0, [pc, #152]	; (8000fbc <display7SEG_2+0x37c>)
 8000f22:	f001 fece 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <display7SEG_2+0x37c>)
 8000f2e:	f001 fec8 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <display7SEG_2+0x37c>)
 8000f3a:	f001 fec2 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <display7SEG_2+0x37c>)
 8000f46:	f001 febc 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	481a      	ldr	r0, [pc, #104]	; (8000fbc <display7SEG_2+0x37c>)
 8000f52:	f001 feb6 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <display7SEG_2+0x380>)
 8000f5c:	f001 feb1 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000f60:	e028      	b.n	8000fb4 <display7SEG_2+0x374>

	case 9:

		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2110      	movs	r1, #16
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <display7SEG_2+0x37c>)
 8000f68:	f001 feab 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <display7SEG_2+0x37c>)
 8000f74:	f001 fea5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <display7SEG_2+0x37c>)
 8000f80:	f001 fe9f 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <display7SEG_2+0x37c>)
 8000f8c:	f001 fe99 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <display7SEG_2+0x37c>)
 8000f98:	f001 fe93 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <display7SEG_2+0x37c>)
 8000fa4:	f001 fe8d 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <display7SEG_2+0x380>)
 8000fae:	f001 fe88 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 8000fb2:	bf00      	nop

	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00

08000fc4 <fsm_automaticRun>:
//
//	}
//
//}
void fsm_automaticRun()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	switch(status){
 8000fc8:	4b78      	ldr	r3, [pc, #480]	; (80011ac <fsm_automaticRun+0x1e8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b67      	cmp	r3, #103	; 0x67
 8000fce:	f000 80d0 	beq.w	8001172 <fsm_automaticRun+0x1ae>
 8000fd2:	2b67      	cmp	r3, #103	; 0x67
 8000fd4:	f300 80e0 	bgt.w	8001198 <fsm_automaticRun+0x1d4>
 8000fd8:	2b66      	cmp	r3, #102	; 0x66
 8000fda:	f000 80b7 	beq.w	800114c <fsm_automaticRun+0x188>
 8000fde:	2b66      	cmp	r3, #102	; 0x66
 8000fe0:	f300 80da 	bgt.w	8001198 <fsm_automaticRun+0x1d4>
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	dc11      	bgt.n	800100c <fsm_automaticRun+0x48>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f340 80d5 	ble.w	8001198 <fsm_automaticRun+0x1d4>
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	f200 80d1 	bhi.w	8001198 <fsm_automaticRun+0x1d4>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <fsm_automaticRun+0x38>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001015 	.word	0x08001015
 8001000:	08001053 	.word	0x08001053
 8001004:	0800109b 	.word	0x0800109b
 8001008:	080010e1 	.word	0x080010e1
 800100c:	2b65      	cmp	r3, #101	; 0x65
 800100e:	f000 808a 	beq.w	8001126 <fsm_automaticRun+0x162>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
			break;
	default:
	break;
 8001012:	e0c1      	b.n	8001198 <fsm_automaticRun+0x1d4>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101a:	4865      	ldr	r0, [pc, #404]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800101c:	f001 fe51 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	4862      	ldr	r0, [pc, #392]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001028:	f001 fe4b 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port , LED_GREEN_2_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	485f      	ldr	r0, [pc, #380]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001034:	f001 fe45 	bl	8002cc2 <HAL_GPIO_WritePin>
		status=AUTO_RED;
 8001038:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <fsm_automaticRun+0x1e8>)
 800103a:	2202      	movs	r2, #2
 800103c:	601a      	str	r2, [r3, #0]
	    setTimer(time_red_2*TIMER_TICKK);
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <fsm_automaticRun+0x1f0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a5d      	ldr	r2, [pc, #372]	; (80011b8 <fsm_automaticRun+0x1f4>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f001 f9c2 	bl	80023d4 <setTimer>
	break;
 8001050:	e0a9      	b.n	80011a6 <fsm_automaticRun+0x1e2>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4855      	ldr	r0, [pc, #340]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800105a:	f001 fe32 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	4852      	ldr	r0, [pc, #328]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001066:	f001 fe2c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	484f      	ldr	r0, [pc, #316]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001072:	f001 fe26 	bl	8002cc2 <HAL_GPIO_WritePin>
		if(timer_flag==1)
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <fsm_automaticRun+0x1f8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	f040 808e 	bne.w	800119c <fsm_automaticRun+0x1d8>
			status=AUTO_GREEN;
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <fsm_automaticRun+0x1e8>)
 8001082:	2203      	movs	r2, #3
 8001084:	601a      	str	r2, [r3, #0]
			setTimer(time_green_2*TIMER_TICKK);
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <fsm_automaticRun+0x1fc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <fsm_automaticRun+0x1f4>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f99e 	bl	80023d4 <setTimer>
		break;
 8001098:	e080      	b.n	800119c <fsm_automaticRun+0x1d8>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4843      	ldr	r0, [pc, #268]	; (80011b0 <fsm_automaticRun+0x1ec>)
 80010a2:	f001 fe0e 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <fsm_automaticRun+0x1ec>)
 80010ae:	f001 fe08 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	483d      	ldr	r0, [pc, #244]	; (80011b0 <fsm_automaticRun+0x1ec>)
 80010ba:	f001 fe02 	bl	8002cc2 <HAL_GPIO_WritePin>
		if(timer_flag==1)
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <fsm_automaticRun+0x1f8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d16c      	bne.n	80011a0 <fsm_automaticRun+0x1dc>
			status=AUTO_YELLOW;
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <fsm_automaticRun+0x1e8>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	601a      	str	r2, [r3, #0]
			setTimer(time_yellow_2*TIMER_TICKK);
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <fsm_automaticRun+0x200>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <fsm_automaticRun+0x1f4>)
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 f97b 	bl	80023d4 <setTimer>
    break;
 80010de:	e05f      	b.n	80011a0 <fsm_automaticRun+0x1dc>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	4832      	ldr	r0, [pc, #200]	; (80011b0 <fsm_automaticRun+0x1ec>)
 80010e8:	f001 fdeb 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f2:	482f      	ldr	r0, [pc, #188]	; (80011b0 <fsm_automaticRun+0x1ec>)
 80010f4:	f001 fde5 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	482c      	ldr	r0, [pc, #176]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001100:	f001 fddf 	bl	8002cc2 <HAL_GPIO_WritePin>
			if(timer_flag==1)
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <fsm_automaticRun+0x1f8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d14b      	bne.n	80011a4 <fsm_automaticRun+0x1e0>
					status=AUTO_RED;
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <fsm_automaticRun+0x1e8>)
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
					setTimer(time_red_2*TIMER_TICKK);
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <fsm_automaticRun+0x1f0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <fsm_automaticRun+0x1f4>)
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f958 	bl	80023d4 <setTimer>
    break;
 8001124:	e03e      	b.n	80011a4 <fsm_automaticRun+0x1e0>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800112e:	f001 fdc8 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	481d      	ldr	r0, [pc, #116]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800113a:	f001 fdc2 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001146:	f001 fdbc 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 800114a:	e02c      	b.n	80011a6 <fsm_automaticRun+0x1e2>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001154:	f001 fdb5 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001160:	f001 fdaf 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800116c:	f001 fda9 	bl	8002cc2 <HAL_GPIO_WritePin>
			break;
 8001170:	e019      	b.n	80011a6 <fsm_automaticRun+0x1e2>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <fsm_automaticRun+0x1ec>)
 800117a:	f001 fda2 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001186:	f001 fd9c 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <fsm_automaticRun+0x1ec>)
 8001192:	f001 fd96 	bl	8002cc2 <HAL_GPIO_WritePin>
			break;
 8001196:	e006      	b.n	80011a6 <fsm_automaticRun+0x1e2>
	break;
 8001198:	bf00      	nop
 800119a:	e004      	b.n	80011a6 <fsm_automaticRun+0x1e2>
		break;
 800119c:	bf00      	nop
 800119e:	e002      	b.n	80011a6 <fsm_automaticRun+0x1e2>
    break;
 80011a0:	bf00      	nop
 80011a2:	e000      	b.n	80011a6 <fsm_automaticRun+0x1e2>
    break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000f4 	.word	0x200000f4
 80011b0:	40010800 	.word	0x40010800
 80011b4:	20000064 	.word	0x20000064
 80011b8:	20000094 	.word	0x20000094
 80011bc:	20000144 	.word	0x20000144
 80011c0:	2000006c 	.word	0x2000006c
 80011c4:	20000068 	.word	0x20000068

080011c8 <fsm_automaticRun2>:


void fsm_automaticRun2()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	switch(status_2){
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <fsm_automaticRun2+0x1b8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b67      	cmp	r3, #103	; 0x67
 80011d2:	f000 80bc 	beq.w	800134e <fsm_automaticRun2+0x186>
 80011d6:	2b67      	cmp	r3, #103	; 0x67
 80011d8:	f300 80c9 	bgt.w	800136e <fsm_automaticRun2+0x1a6>
 80011dc:	2b66      	cmp	r3, #102	; 0x66
 80011de:	f000 80a6 	beq.w	800132e <fsm_automaticRun2+0x166>
 80011e2:	2b66      	cmp	r3, #102	; 0x66
 80011e4:	f300 80c3 	bgt.w	800136e <fsm_automaticRun2+0x1a6>
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	dc11      	bgt.n	8001210 <fsm_automaticRun2+0x48>
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	f2c0 80be 	blt.w	800136e <fsm_automaticRun2+0x1a6>
 80011f2:	3b05      	subs	r3, #5
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	f200 80ba 	bhi.w	800136e <fsm_automaticRun2+0x1a6>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <fsm_automaticRun2+0x38>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001217 	.word	0x08001217
 8001204:	0800124f 	.word	0x0800124f
 8001208:	0800128f 	.word	0x0800128f
 800120c:	080012cf 	.word	0x080012cf
 8001210:	2b65      	cmp	r3, #101	; 0x65
 8001212:	d07c      	beq.n	800130e <fsm_automaticRun2+0x146>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
		break;

	default:
	break;
 8001214:	e0ab      	b.n	800136e <fsm_automaticRun2+0x1a6>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	485a      	ldr	r0, [pc, #360]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800121c:	f001 fd51 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	4857      	ldr	r0, [pc, #348]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001226:	f001 fd4c 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4855      	ldr	r0, [pc, #340]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001230:	f001 fd47 	bl	8002cc2 <HAL_GPIO_WritePin>
		status_2=AUTO_GREEN_2;
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <fsm_automaticRun2+0x1b8>)
 8001236:	2206      	movs	r2, #6
 8001238:	601a      	str	r2, [r3, #0]
	    setTimer1(time_green_1*TIMER_TICKK);
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <fsm_automaticRun2+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a53      	ldr	r2, [pc, #332]	; (800138c <fsm_automaticRun2+0x1c4>)
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f8a8 	bl	800239c <setTimer1>
	break;
 800124c:	e096      	b.n	800137c <fsm_automaticRun2+0x1b4>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2120      	movs	r1, #32
 8001252:	484c      	ldr	r0, [pc, #304]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001254:	f001 fd35 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4849      	ldr	r0, [pc, #292]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800125e:	f001 fd30 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	4847      	ldr	r0, [pc, #284]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001268:	f001 fd2b 	bl	8002cc2 <HAL_GPIO_WritePin>
		if(timer_flag1==1)
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <fsm_automaticRun2+0x1c8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d17e      	bne.n	8001372 <fsm_automaticRun2+0x1aa>
			status_2=AUTO_YELLOW_2;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <fsm_automaticRun2+0x1b8>)
 8001276:	2207      	movs	r2, #7
 8001278:	601a      	str	r2, [r3, #0]
			setTimer1(time_yellow_1*TIMER_TICKK);
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <fsm_automaticRun2+0x1cc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a43      	ldr	r2, [pc, #268]	; (800138c <fsm_automaticRun2+0x1c4>)
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f888 	bl	800239c <setTimer1>
    break;
 800128c:	e071      	b.n	8001372 <fsm_automaticRun2+0x1aa>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	483c      	ldr	r0, [pc, #240]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001294:	f001 fd15 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	4839      	ldr	r0, [pc, #228]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800129e:	f001 fd10 	bl	8002cc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4837      	ldr	r0, [pc, #220]	; (8001384 <fsm_automaticRun2+0x1bc>)
 80012a8:	f001 fd0b 	bl	8002cc2 <HAL_GPIO_WritePin>
			if(timer_flag1==1)
 80012ac:	4b38      	ldr	r3, [pc, #224]	; (8001390 <fsm_automaticRun2+0x1c8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d160      	bne.n	8001376 <fsm_automaticRun2+0x1ae>
				status_2=AUTO_RED_2;
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <fsm_automaticRun2+0x1b8>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	601a      	str	r2, [r3, #0]
					setTimer1(time_red_1*TIMER_TICKK);
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <fsm_automaticRun2+0x1d0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a33      	ldr	r2, [pc, #204]	; (800138c <fsm_automaticRun2+0x1c4>)
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 f868 	bl	800239c <setTimer1>
    break;
 80012cc:	e053      	b.n	8001376 <fsm_automaticRun2+0x1ae>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2120      	movs	r1, #32
 80012d2:	482c      	ldr	r0, [pc, #176]	; (8001384 <fsm_automaticRun2+0x1bc>)
 80012d4:	f001 fcf5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	4829      	ldr	r0, [pc, #164]	; (8001384 <fsm_automaticRun2+0x1bc>)
 80012de:	f001 fcf0 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <fsm_automaticRun2+0x1bc>)
 80012e8:	f001 fceb 	bl	8002cc2 <HAL_GPIO_WritePin>
		if(timer_flag1==1)
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <fsm_automaticRun2+0x1c8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d142      	bne.n	800137a <fsm_automaticRun2+0x1b2>
			status_2=AUTO_GREEN_2;
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <fsm_automaticRun2+0x1b8>)
 80012f6:	2206      	movs	r2, #6
 80012f8:	601a      	str	r2, [r3, #0]
			setTimer1(time_green_1*TIMER_TICKK);
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <fsm_automaticRun2+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <fsm_automaticRun2+0x1c4>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f848 	bl	800239c <setTimer1>
		break;
 800130c:	e035      	b.n	800137a <fsm_automaticRun2+0x1b2>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2120      	movs	r1, #32
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001314:	f001 fcd5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800131e:	f001 fcd0 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	4817      	ldr	r0, [pc, #92]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001328:	f001 fccb 	bl	8002cc2 <HAL_GPIO_WritePin>
	break;
 800132c:	e026      	b.n	800137c <fsm_automaticRun2+0x1b4>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2120      	movs	r1, #32
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001334:	f001 fcc5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800133e:	f001 fcc0 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001348:	f001 fcbb 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 800134c:	e016      	b.n	800137c <fsm_automaticRun2+0x1b4>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001354:	f001 fcb5 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <fsm_automaticRun2+0x1bc>)
 800135e:	f001 fcb0 	bl	8002cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <fsm_automaticRun2+0x1bc>)
 8001368:	f001 fcab 	bl	8002cc2 <HAL_GPIO_WritePin>
		break;
 800136c:	e006      	b.n	800137c <fsm_automaticRun2+0x1b4>
	break;
 800136e:	bf00      	nop
 8001370:	e004      	b.n	800137c <fsm_automaticRun2+0x1b4>
    break;
 8001372:	bf00      	nop
 8001374:	e002      	b.n	800137c <fsm_automaticRun2+0x1b4>
    break;
 8001376:	bf00      	nop
 8001378:	e000      	b.n	800137c <fsm_automaticRun2+0x1b4>
		break;
 800137a:	bf00      	nop
	}
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f8 	.word	0x200000f8
 8001384:	40010800 	.word	0x40010800
 8001388:	20000078 	.word	0x20000078
 800138c:	20000094 	.word	0x20000094
 8001390:	2000014c 	.word	0x2000014c
 8001394:	20000074 	.word	0x20000074
 8001398:	20000070 	.word	0x20000070

0800139c <fsm_7seg2>:
 *      Author: Duy
 */

#include "fsm_control7seg.h"
void fsm_7seg2()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	switch(status_7seg2){
 80013a0:	4b9e      	ldr	r3, [pc, #632]	; (800161c <fsm_7seg2+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	f200 8129 	bhi.w	80015fe <fsm_7seg2+0x262>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <fsm_7seg2+0x18>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	08001445 	.word	0x08001445
 80013bc:	080014bd 	.word	0x080014bd
 80013c0:	08001533 	.word	0x08001533
 80013c4:	080015bb 	.word	0x080015bb
 80013c8:	08001577 	.word	0x08001577
	case led7seg2_red:
		co_led_red_2=1;
 80013cc:	4b94      	ldr	r3, [pc, #592]	; (8001620 <fsm_7seg2+0x284>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
		co_led_green_2=1;
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <fsm_7seg2+0x288>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
		co_led_yellow_2=1;
 80013d8:	4b93      	ldr	r3, [pc, #588]	; (8001628 <fsm_7seg2+0x28c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
        if(timer_flag3==1)
 80013de:	4b93      	ldr	r3, [pc, #588]	; (800162c <fsm_7seg2+0x290>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d116      	bne.n	8001414 <fsm_7seg2+0x78>
        {
        	counter2_1--;
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <fsm_7seg2+0x294>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	4a90      	ldr	r2, [pc, #576]	; (8001630 <fsm_7seg2+0x294>)
 80013ee:	6013      	str	r3, [r2, #0]
    		update_buffer_1();
 80013f0:	f7ff f828 	bl	8000444 <update_buffer_1>
        	if(counter2_1==0)
 80013f4:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <fsm_7seg2+0x294>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <fsm_7seg2+0x6e>
        	{
        		counter2_1=counter2_1_temp;
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <fsm_7seg2+0x298>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a8b      	ldr	r2, [pc, #556]	; (8001630 <fsm_7seg2+0x294>)
 8001402:	6013      	str	r3, [r2, #0]
        		status_7seg2=led7seg2_green;
 8001404:	4b85      	ldr	r3, [pc, #532]	; (800161c <fsm_7seg2+0x280>)
 8001406:	2202      	movs	r2, #2
 8001408:	601a      	str	r2, [r3, #0]

        	}
    		setTimer3(TIMER_TICKK);
 800140a:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <fsm_7seg2+0x29c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 ff8c 	bl	800232c <setTimer3>

        }
		if(timer_flag4==1)
 8001414:	4b89      	ldr	r3, [pc, #548]	; (800163c <fsm_7seg2+0x2a0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	f040 80f2 	bne.w	8001602 <fsm_7seg2+0x266>
		{

			if(index_led>=2) {index_led=0;}
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <fsm_7seg2+0x2a4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	dd02      	ble.n	800142c <fsm_7seg2+0x90>
 8001426:	4b86      	ldr	r3, [pc, #536]	; (8001640 <fsm_7seg2+0x2a4>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
			update_led7_2_1(index_led++);
 800142c:	4b84      	ldr	r3, [pc, #528]	; (8001640 <fsm_7seg2+0x2a4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	4983      	ldr	r1, [pc, #524]	; (8001640 <fsm_7seg2+0x2a4>)
 8001434:	600a      	str	r2, [r1, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fa04 	bl	8000844 <update_led7_2_1>
			setTimer4(80);
 800143c:	2050      	movs	r0, #80	; 0x50
 800143e:	f000 ff59 	bl	80022f4 <setTimer4>
		}
	      break;
 8001442:	e0de      	b.n	8001602 <fsm_7seg2+0x266>

	case led7seg2_green:
		co_led_red_2=1;
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <fsm_7seg2+0x284>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
		co_led_green_2=1;
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <fsm_7seg2+0x288>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		co_led_yellow_2=1;
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <fsm_7seg2+0x28c>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
		if(timer_flag3==1)
 8001456:	4b75      	ldr	r3, [pc, #468]	; (800162c <fsm_7seg2+0x290>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d116      	bne.n	800148c <fsm_7seg2+0xf0>
		{
			counter2_2--;
 800145e:	4b79      	ldr	r3, [pc, #484]	; (8001644 <fsm_7seg2+0x2a8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a77      	ldr	r2, [pc, #476]	; (8001644 <fsm_7seg2+0x2a8>)
 8001466:	6013      	str	r3, [r2, #0]
			update_buffer_2();
 8001468:	f7ff f84c 	bl	8000504 <update_buffer_2>
			if(counter2_2==0)
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <fsm_7seg2+0x2a8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <fsm_7seg2+0xe6>
			{
				counter2_2=counter2_2_temp;
 8001474:	4b74      	ldr	r3, [pc, #464]	; (8001648 <fsm_7seg2+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a72      	ldr	r2, [pc, #456]	; (8001644 <fsm_7seg2+0x2a8>)
 800147a:	6013      	str	r3, [r2, #0]
				status_7seg2=led7seg2_yellow;
 800147c:	4b67      	ldr	r3, [pc, #412]	; (800161c <fsm_7seg2+0x280>)
 800147e:	2203      	movs	r2, #3
 8001480:	601a      	str	r2, [r3, #0]
			}
			setTimer3(TIMER_TICKK);
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <fsm_7seg2+0x29c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 ff50 	bl	800232c <setTimer3>


		}
		if(timer_flag4==1)
 800148c:	4b6b      	ldr	r3, [pc, #428]	; (800163c <fsm_7seg2+0x2a0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 80b8 	bne.w	8001606 <fsm_7seg2+0x26a>
		{
			if(index_led>=2) {index_led=0;}
 8001496:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <fsm_7seg2+0x2a4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	dd02      	ble.n	80014a4 <fsm_7seg2+0x108>
 800149e:	4b68      	ldr	r3, [pc, #416]	; (8001640 <fsm_7seg2+0x2a4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
			update_led7_2_2(index_led++);
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <fsm_7seg2+0x2a4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4965      	ldr	r1, [pc, #404]	; (8001640 <fsm_7seg2+0x2a4>)
 80014ac:	600a      	str	r2, [r1, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f990 	bl	80007d4 <update_led7_2_2>
			setTimer4(80);
 80014b4:	2050      	movs	r0, #80	; 0x50
 80014b6:	f000 ff1d 	bl	80022f4 <setTimer4>
		}
	      break;
 80014ba:	e0a4      	b.n	8001606 <fsm_7seg2+0x26a>
	case led7seg2_yellow:
		co_led_red_2=1;
 80014bc:	4b58      	ldr	r3, [pc, #352]	; (8001620 <fsm_7seg2+0x284>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
		co_led_green_2=1;
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <fsm_7seg2+0x288>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
		co_led_yellow_2=1;
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <fsm_7seg2+0x28c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
		if(timer_flag3==1)
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <fsm_7seg2+0x290>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d116      	bne.n	8001504 <fsm_7seg2+0x168>
		{
			counter2_3--;
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <fsm_7seg2+0x2b0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4a5b      	ldr	r2, [pc, #364]	; (800164c <fsm_7seg2+0x2b0>)
 80014de:	6013      	str	r3, [r2, #0]
			update_buffer_3();
 80014e0:	f7ff f870 	bl	80005c4 <update_buffer_3>
			if(counter2_3==0)
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <fsm_7seg2+0x2b0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <fsm_7seg2+0x15e>
			{
				counter2_3=counter2_3_temp;
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <fsm_7seg2+0x2b4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a56      	ldr	r2, [pc, #344]	; (800164c <fsm_7seg2+0x2b0>)
 80014f2:	6013      	str	r3, [r2, #0]
				status_7seg2=led7seg2_red;
 80014f4:	4b49      	ldr	r3, [pc, #292]	; (800161c <fsm_7seg2+0x280>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
			}
			setTimer3(TIMER_TICKK);
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <fsm_7seg2+0x29c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 ff14 	bl	800232c <setTimer3>

		}
		if(timer_flag4==1)
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <fsm_7seg2+0x2a0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d17e      	bne.n	800160a <fsm_7seg2+0x26e>
		{
			if(index_led>=2) {index_led=0;}
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <fsm_7seg2+0x2a4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	dd02      	ble.n	800151a <fsm_7seg2+0x17e>
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <fsm_7seg2+0x2a4>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
			update_led7_2_3(index_led++);
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <fsm_7seg2+0x2a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4947      	ldr	r1, [pc, #284]	; (8001640 <fsm_7seg2+0x2a4>)
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f9c5 	bl	80008b4 <update_led7_2_3>
			setTimer4(80);
 800152a:	2050      	movs	r0, #80	; 0x50
 800152c:	f000 fee2 	bl	80022f4 <setTimer4>
		}
	      break;
 8001530:	e06b      	b.n	800160a <fsm_7seg2+0x26e>
	 case stop_led_red2:
		 if(timer_flag3==1)
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <fsm_7seg2+0x290>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <fsm_7seg2+0x1ac>
		         {
		     		update_buffer_1();
 800153a:	f7fe ff83 	bl	8000444 <update_buffer_1>
		     		setTimer3(TIMER_TICKK);
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <fsm_7seg2+0x29c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fef2 	bl	800232c <setTimer3>

		         }
		 		if(timer_flag4==1)
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <fsm_7seg2+0x2a0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d15e      	bne.n	800160e <fsm_7seg2+0x272>
		 		{

		 			if(index_led>=2) {index_led=0;}
 8001550:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <fsm_7seg2+0x2a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	dd02      	ble.n	800155e <fsm_7seg2+0x1c2>
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <fsm_7seg2+0x2a4>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
		 			update_led7_2_1(index_led++);
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <fsm_7seg2+0x2a4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	4936      	ldr	r1, [pc, #216]	; (8001640 <fsm_7seg2+0x2a4>)
 8001566:	600a      	str	r2, [r1, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f96b 	bl	8000844 <update_led7_2_1>
		 			setTimer4(80);
 800156e:	2050      	movs	r0, #80	; 0x50
 8001570:	f000 fec0 	bl	80022f4 <setTimer4>
		 		}
		 	break;
 8001574:	e04b      	b.n	800160e <fsm_7seg2+0x272>
	 case stop_led_green2:
		 if(timer_flag3==1)
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <fsm_7seg2+0x290>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d106      	bne.n	800158c <fsm_7seg2+0x1f0>
		 		{
		 			update_buffer_2();
 800157e:	f7fe ffc1 	bl	8000504 <update_buffer_2>
		 			setTimer3(TIMER_TICKK);
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <fsm_7seg2+0x29c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fed0 	bl	800232c <setTimer3>
		 		}
		 		if(timer_flag4==1)
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <fsm_7seg2+0x2a0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d13e      	bne.n	8001612 <fsm_7seg2+0x276>
		 		{
		 			if(index_led>=2) {index_led=0;}
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <fsm_7seg2+0x2a4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	dd02      	ble.n	80015a2 <fsm_7seg2+0x206>
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <fsm_7seg2+0x2a4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
		 			update_led7_2_2(index_led++);
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <fsm_7seg2+0x2a4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	4925      	ldr	r1, [pc, #148]	; (8001640 <fsm_7seg2+0x2a4>)
 80015aa:	600a      	str	r2, [r1, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f911 	bl	80007d4 <update_led7_2_2>
		 			setTimer4(80);
 80015b2:	2050      	movs	r0, #80	; 0x50
 80015b4:	f000 fe9e 	bl	80022f4 <setTimer4>
		 		}
		 	      break;
 80015b8:	e02b      	b.n	8001612 <fsm_7seg2+0x276>
	 case stop_led_yellow2:
		 if(timer_flag3==1)
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <fsm_7seg2+0x290>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <fsm_7seg2+0x234>
		 		{
		 			update_buffer_3();
 80015c2:	f7fe ffff 	bl	80005c4 <update_buffer_3>
		 			setTimer3(TIMER_TICKK);
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <fsm_7seg2+0x29c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 feae 	bl	800232c <setTimer3>
		 		}
		 		if(timer_flag4==1)
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <fsm_7seg2+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11e      	bne.n	8001616 <fsm_7seg2+0x27a>
		 		{
		 			if(index_led>=2) {index_led=0;}
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <fsm_7seg2+0x2a4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	dd02      	ble.n	80015e6 <fsm_7seg2+0x24a>
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <fsm_7seg2+0x2a4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
		 			update_led7_2_3(index_led++);
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <fsm_7seg2+0x2a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	4914      	ldr	r1, [pc, #80]	; (8001640 <fsm_7seg2+0x2a4>)
 80015ee:	600a      	str	r2, [r1, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f95f 	bl	80008b4 <update_led7_2_3>
		 			setTimer4(80);
 80015f6:	2050      	movs	r0, #80	; 0x50
 80015f8:	f000 fe7c 	bl	80022f4 <setTimer4>
		 		}
		 	      break;
 80015fc:	e00b      	b.n	8001616 <fsm_7seg2+0x27a>

	default:
		break;
 80015fe:	bf00      	nop
 8001600:	e00a      	b.n	8001618 <fsm_7seg2+0x27c>
	      break;
 8001602:	bf00      	nop
 8001604:	e008      	b.n	8001618 <fsm_7seg2+0x27c>
	      break;
 8001606:	bf00      	nop
 8001608:	e006      	b.n	8001618 <fsm_7seg2+0x27c>
	      break;
 800160a:	bf00      	nop
 800160c:	e004      	b.n	8001618 <fsm_7seg2+0x27c>
		 	break;
 800160e:	bf00      	nop
 8001610:	e002      	b.n	8001618 <fsm_7seg2+0x27c>
		 	      break;
 8001612:	bf00      	nop
 8001614:	e000      	b.n	8001618 <fsm_7seg2+0x27c>
		 	      break;
 8001616:	bf00      	nop
	}
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000100 	.word	0x20000100
 8001620:	200000d8 	.word	0x200000d8
 8001624:	200000dc 	.word	0x200000dc
 8001628:	200000e0 	.word	0x200000e0
 800162c:	2000015c 	.word	0x2000015c
 8001630:	20000034 	.word	0x20000034
 8001634:	2000004c 	.word	0x2000004c
 8001638:	20000094 	.word	0x20000094
 800163c:	20000164 	.word	0x20000164
 8001640:	20000134 	.word	0x20000134
 8001644:	20000038 	.word	0x20000038
 8001648:	20000050 	.word	0x20000050
 800164c:	2000003c 	.word	0x2000003c
 8001650:	20000054 	.word	0x20000054

08001654 <fsm_7seg1>:
void fsm_7seg1()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	switch(status_7seg1){
 8001658:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <fsm_7seg1+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	2b05      	cmp	r3, #5
 8001660:	f200 8129 	bhi.w	80018b6 <fsm_7seg1+0x262>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <fsm_7seg1+0x18>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	08001685 	.word	0x08001685
 8001670:	080016fd 	.word	0x080016fd
 8001674:	08001775 	.word	0x08001775
 8001678:	080017eb 	.word	0x080017eb
 800167c:	0800182f 	.word	0x0800182f
 8001680:	08001873 	.word	0x08001873
	case led7seg1_green:
		co_led_red_1=1;
 8001684:	4b94      	ldr	r3, [pc, #592]	; (80018d8 <fsm_7seg1+0x284>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
		co_led_green_1=1;
 800168a:	4b94      	ldr	r3, [pc, #592]	; (80018dc <fsm_7seg1+0x288>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
		co_led_yellow_1=1;
 8001690:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <fsm_7seg1+0x28c>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]
		if(timer_flag_7seg2==1)
 8001696:	4b93      	ldr	r3, [pc, #588]	; (80018e4 <fsm_7seg1+0x290>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d116      	bne.n	80016cc <fsm_7seg1+0x78>
		{
			counter1_2--;
 800169e:	4b92      	ldr	r3, [pc, #584]	; (80018e8 <fsm_7seg1+0x294>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <fsm_7seg1+0x294>)
 80016a6:	6013      	str	r3, [r2, #0]
			update_buffer_2();
 80016a8:	f7fe ff2c 	bl	8000504 <update_buffer_2>
			if(counter1_2==0)
 80016ac:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <fsm_7seg1+0x294>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d106      	bne.n	80016c2 <fsm_7seg1+0x6e>
			{
				counter1_2=counter1_2_temp;
 80016b4:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <fsm_7seg1+0x298>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a8b      	ldr	r2, [pc, #556]	; (80018e8 <fsm_7seg1+0x294>)
 80016ba:	6013      	str	r3, [r2, #0]
				status_7seg1=led7seg1_yellow;
 80016bc:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <fsm_7seg1+0x280>)
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
			}
			setTimer2(TIMER_TICKK);
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <fsm_7seg1+0x29c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fe4c 	bl	8002364 <setTimer2>
		}
		if(timer_flag5==1)
 80016cc:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <fsm_7seg1+0x2a0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	f040 80f2 	bne.w	80018ba <fsm_7seg1+0x266>
		{
			if(index_led1>=2) index_led1=0;
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <fsm_7seg1+0x2a4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	dd02      	ble.n	80016e4 <fsm_7seg1+0x90>
 80016de:	4b86      	ldr	r3, [pc, #536]	; (80018f8 <fsm_7seg1+0x2a4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
			update_led7_1_2(index_led1++);
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <fsm_7seg1+0x2a4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4983      	ldr	r1, [pc, #524]	; (80018f8 <fsm_7seg1+0x2a4>)
 80016ec:	600a      	str	r2, [r1, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f800 	bl	80006f4 <update_led7_1_2>
			setTimer5(80);
 80016f4:	2050      	movs	r0, #80	; 0x50
 80016f6:	f000 fde1 	bl	80022bc <setTimer5>
		}
	      break;
 80016fa:	e0de      	b.n	80018ba <fsm_7seg1+0x266>
	case led7seg1_yellow:
		co_led_red_1=1;
 80016fc:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <fsm_7seg1+0x284>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
		co_led_green_1=1;
 8001702:	4b76      	ldr	r3, [pc, #472]	; (80018dc <fsm_7seg1+0x288>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
		co_led_yellow_1=1;
 8001708:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <fsm_7seg1+0x28c>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
		if(timer_flag_7seg2==1)
 800170e:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <fsm_7seg1+0x290>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d116      	bne.n	8001744 <fsm_7seg1+0xf0>
				{
					counter1_3--;
 8001716:	4b79      	ldr	r3, [pc, #484]	; (80018fc <fsm_7seg1+0x2a8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	4a77      	ldr	r2, [pc, #476]	; (80018fc <fsm_7seg1+0x2a8>)
 800171e:	6013      	str	r3, [r2, #0]
					update_buffer_3();
 8001720:	f7fe ff50 	bl	80005c4 <update_buffer_3>
					if(counter1_3==0)
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <fsm_7seg1+0x2a8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <fsm_7seg1+0xe6>
							{
								counter1_3=counter1_3_temp;
 800172c:	4b74      	ldr	r3, [pc, #464]	; (8001900 <fsm_7seg1+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a72      	ldr	r2, [pc, #456]	; (80018fc <fsm_7seg1+0x2a8>)
 8001732:	6013      	str	r3, [r2, #0]
								status_7seg1=led7seg1_red;
 8001734:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <fsm_7seg1+0x280>)
 8001736:	2203      	movs	r2, #3
 8001738:	601a      	str	r2, [r3, #0]
							}
					setTimer2(TIMER_TICKK);
 800173a:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <fsm_7seg1+0x29c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fe10 	bl	8002364 <setTimer2>
				}
		if(timer_flag5==1)
 8001744:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <fsm_7seg1+0x2a0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	f040 80b8 	bne.w	80018be <fsm_7seg1+0x26a>
		{
			if(index_led1>=2) index_led1=0;
 800174e:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	dd02      	ble.n	800175c <fsm_7seg1+0x108>
 8001756:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
			update_led7_1_3(index_led1++);
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <fsm_7seg1+0x2a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001764:	600a      	str	r2, [r1, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fffc 	bl	8000764 <update_led7_1_3>
			setTimer5(80);
 800176c:	2050      	movs	r0, #80	; 0x50
 800176e:	f000 fda5 	bl	80022bc <setTimer5>
		}
	      break;
 8001772:	e0a4      	b.n	80018be <fsm_7seg1+0x26a>
	case led7seg1_red:
		co_led_red_1=1;
 8001774:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <fsm_7seg1+0x284>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
		co_led_green_1=1;
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <fsm_7seg1+0x288>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
		co_led_yellow_1=1;
 8001780:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <fsm_7seg1+0x28c>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
		if(timer_flag_7seg2==1)
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <fsm_7seg1+0x290>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d116      	bne.n	80017bc <fsm_7seg1+0x168>
		{
			counter1_1--;
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <fsm_7seg1+0x2b0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <fsm_7seg1+0x2b0>)
 8001796:	6013      	str	r3, [r2, #0]
			update_buffer_1();
 8001798:	f7fe fe54 	bl	8000444 <update_buffer_1>
			if(counter1_1==0)
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <fsm_7seg1+0x2b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <fsm_7seg1+0x15e>
			{
				counter1_1=counter1_1_temp;
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <fsm_7seg1+0x2b4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a56      	ldr	r2, [pc, #344]	; (8001904 <fsm_7seg1+0x2b0>)
 80017aa:	6013      	str	r3, [r2, #0]
				status_7seg1=led7seg1_green;
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <fsm_7seg1+0x280>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
			}
			setTimer2(TIMER_TICKK);
 80017b2:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <fsm_7seg1+0x29c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fdd4 	bl	8002364 <setTimer2>
		}
		if(timer_flag5==1)
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <fsm_7seg1+0x2a0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d17e      	bne.n	80018c2 <fsm_7seg1+0x26e>
		{
			if(index_led1>=2) index_led1=0;
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <fsm_7seg1+0x2a4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	dd02      	ble.n	80017d2 <fsm_7seg1+0x17e>
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <fsm_7seg1+0x2a4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
			update_led7_1_1(index_led1++);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <fsm_7seg1+0x2a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4947      	ldr	r1, [pc, #284]	; (80018f8 <fsm_7seg1+0x2a4>)
 80017da:	600a      	str	r2, [r1, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff51 	bl	8000684 <update_led7_1_1>
			setTimer5(80);
 80017e2:	2050      	movs	r0, #80	; 0x50
 80017e4:	f000 fd6a 	bl	80022bc <setTimer5>
		}
	      break;
 80017e8:	e06b      	b.n	80018c2 <fsm_7seg1+0x26e>
	case stop_led_red1:
		if(timer_flag_7seg2==1)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <fsm_7seg1+0x290>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d106      	bne.n	8001800 <fsm_7seg1+0x1ac>
				{
					update_buffer_1();
 80017f2:	f7fe fe27 	bl	8000444 <update_buffer_1>

					setTimer2(TIMER_TICKK);
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <fsm_7seg1+0x29c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fdb2 	bl	8002364 <setTimer2>
				}
				if(timer_flag5==1)
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <fsm_7seg1+0x2a0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d15e      	bne.n	80018c6 <fsm_7seg1+0x272>
				{
					if(index_led1>=2) index_led1=0;
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <fsm_7seg1+0x2a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	dd02      	ble.n	8001816 <fsm_7seg1+0x1c2>
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
					update_led7_1_1(index_led1++);
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4936      	ldr	r1, [pc, #216]	; (80018f8 <fsm_7seg1+0x2a4>)
 800181e:	600a      	str	r2, [r1, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe ff2f 	bl	8000684 <update_led7_1_1>
					setTimer5(80);
 8001826:	2050      	movs	r0, #80	; 0x50
 8001828:	f000 fd48 	bl	80022bc <setTimer5>
				}
			      break;
 800182c:	e04b      	b.n	80018c6 <fsm_7seg1+0x272>
	case stop_led_yellow1:
		if(timer_flag_7seg2==1)
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <fsm_7seg1+0x290>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d106      	bne.n	8001844 <fsm_7seg1+0x1f0>
				{
					update_buffer_3();
 8001836:	f7fe fec5 	bl	80005c4 <update_buffer_3>
					setTimer2(TIMER_TICKK);
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <fsm_7seg1+0x29c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fd90 	bl	8002364 <setTimer2>
				}
		if(timer_flag5==1)
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <fsm_7seg1+0x2a0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d13e      	bne.n	80018ca <fsm_7seg1+0x276>
		{
			if(index_led1>=2) index_led1=0;
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <fsm_7seg1+0x2a4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	dd02      	ble.n	800185a <fsm_7seg1+0x206>
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
			update_led7_1_3(index_led1++);
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <fsm_7seg1+0x2a4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4925      	ldr	r1, [pc, #148]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001862:	600a      	str	r2, [r1, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe ff7d 	bl	8000764 <update_led7_1_3>
			setTimer5(80);
 800186a:	2050      	movs	r0, #80	; 0x50
 800186c:	f000 fd26 	bl	80022bc <setTimer5>
		}
	      break;
 8001870:	e02b      	b.n	80018ca <fsm_7seg1+0x276>
	case stop_led_green1:
		if(timer_flag_7seg2==1)
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <fsm_7seg1+0x290>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d106      	bne.n	8001888 <fsm_7seg1+0x234>
		{
			update_buffer_2();
 800187a:	f7fe fe43 	bl	8000504 <update_buffer_2>
			setTimer2(TIMER_TICKK);
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <fsm_7seg1+0x29c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd6e 	bl	8002364 <setTimer2>
		}
		if(timer_flag5==1)
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <fsm_7seg1+0x2a0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11e      	bne.n	80018ce <fsm_7seg1+0x27a>
		{
			if(index_led1>=2) index_led1=0;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <fsm_7seg1+0x2a4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	dd02      	ble.n	800189e <fsm_7seg1+0x24a>
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <fsm_7seg1+0x2a4>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
			update_led7_1_2(index_led1++);
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <fsm_7seg1+0x2a4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	4914      	ldr	r1, [pc, #80]	; (80018f8 <fsm_7seg1+0x2a4>)
 80018a6:	600a      	str	r2, [r1, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe ff23 	bl	80006f4 <update_led7_1_2>
			setTimer5(80);
 80018ae:	2050      	movs	r0, #80	; 0x50
 80018b0:	f000 fd04 	bl	80022bc <setTimer5>
		}
	      break;
 80018b4:	e00b      	b.n	80018ce <fsm_7seg1+0x27a>
	default:
		break;
 80018b6:	bf00      	nop
 80018b8:	e00a      	b.n	80018d0 <fsm_7seg1+0x27c>
	      break;
 80018ba:	bf00      	nop
 80018bc:	e008      	b.n	80018d0 <fsm_7seg1+0x27c>
	      break;
 80018be:	bf00      	nop
 80018c0:	e006      	b.n	80018d0 <fsm_7seg1+0x27c>
	      break;
 80018c2:	bf00      	nop
 80018c4:	e004      	b.n	80018d0 <fsm_7seg1+0x27c>
			      break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <fsm_7seg1+0x27c>
	      break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <fsm_7seg1+0x27c>
	      break;
 80018ce:	bf00      	nop
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000fc 	.word	0x200000fc
 80018d8:	200000e4 	.word	0x200000e4
 80018dc:	200000e8 	.word	0x200000e8
 80018e0:	200000ec 	.word	0x200000ec
 80018e4:	20000154 	.word	0x20000154
 80018e8:	20000044 	.word	0x20000044
 80018ec:	2000005c 	.word	0x2000005c
 80018f0:	20000094 	.word	0x20000094
 80018f4:	2000016c 	.word	0x2000016c
 80018f8:	20000138 	.word	0x20000138
 80018fc:	20000048 	.word	0x20000048
 8001900:	20000060 	.word	0x20000060
 8001904:	20000040 	.word	0x20000040
 8001908:	20000058 	.word	0x20000058

0800190c <fsm_control_system>:
 */
#include "fsm_manual.h"



void fsm_control_system(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
switch(status_control_system)
 8001910:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <fsm_control_system+0x1d8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b0c      	subs	r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	f200 818c 	bhi.w	8001c34 <fsm_control_system+0x328>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <fsm_control_system+0x18>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001939 	.word	0x08001939
 8001928:	08001941 	.word	0x08001941
 800192c:	08001955 	.word	0x08001955
 8001930:	08001a1d 	.word	0x08001a1d
 8001934:	08001b49 	.word	0x08001b49
  	{
  	case Normal_set:
  		status_control_system=SET1;
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <fsm_control_system+0x1d8>)
 800193a:	220d      	movs	r2, #13
 800193c:	601a      	str	r2, [r3, #0]
  		break;
 800193e:	e179      	b.n	8001c34 <fsm_control_system+0x328>
  	case SET1:
  		 if(isButton1Pressed()==1)
 8001940:	f7fe fc04 	bl	800014c <isButton1Pressed>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	f040 816d 	bne.w	8001c26 <fsm_control_system+0x31a>
  		{
  			status_control_system=SET2;
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <fsm_control_system+0x1d8>)
 800194e:	220e      	movs	r2, #14
 8001950:	601a      	str	r2, [r3, #0]
  		}

  		break;
 8001952:	e168      	b.n	8001c26 <fsm_control_system+0x31a>
  	case SET2: //led_red

		  status=off_ledred_2;
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <fsm_control_system+0x1dc>)
 8001956:	2265      	movs	r2, #101	; 0x65
 8001958:	601a      	str	r2, [r3, #0]
		  status_2=off_ledred_1;
 800195a:	4b64      	ldr	r3, [pc, #400]	; (8001aec <fsm_control_system+0x1e0>)
 800195c:	2265      	movs	r2, #101	; 0x65
 800195e:	601a      	str	r2, [r3, #0]
		  status_7seg2=stop_led_red2;
 8001960:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <fsm_control_system+0x1e4>)
 8001962:	2204      	movs	r2, #4
 8001964:	601a      	str	r2, [r3, #0]
		  status_7seg1=stop_led_red1;
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <fsm_control_system+0x1e8>)
 8001968:	2204      	movs	r2, #4
 800196a:	601a      	str	r2, [r3, #0]
		  if(co_led_red_2==1)
 800196c:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <fsm_control_system+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <fsm_control_system+0x74>
		  {
			  counter2_1=5;
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <fsm_control_system+0x1f0>)
 8001976:	2205      	movs	r2, #5
 8001978:	601a      	str	r2, [r3, #0]
			  co_led_red_2=0;
 800197a:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <fsm_control_system+0x1ec>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
		  }
		  if(co_led_red_1==1)
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <fsm_control_system+0x1f4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <fsm_control_system+0x88>
		  {
			  counter1_1=5;
 8001988:	4b5e      	ldr	r3, [pc, #376]	; (8001b04 <fsm_control_system+0x1f8>)
 800198a:	2205      	movs	r2, #5
 800198c:	601a      	str	r2, [r3, #0]
			  co_led_red_1=0;
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <fsm_control_system+0x1f4>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
		  }
		  if(isButton2Pressed()==1)
 8001994:	f7fe fbec 	bl	8000170 <isButton2Pressed>
 8001998:	4603      	mov	r3, r0
 800199a:	2b01      	cmp	r3, #1
 800199c:	d11b      	bne.n	80019d6 <fsm_control_system+0xca>
		  {
			  time_red_2++;
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <fsm_control_system+0x1fc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <fsm_control_system+0x1fc>)
 80019a6:	6013      	str	r3, [r2, #0]
			  time_red_1++;
 80019a8:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <fsm_control_system+0x200>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <fsm_control_system+0x200>)
 80019b0:	6013      	str	r3, [r2, #0]
			  counter2_1++;
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <fsm_control_system+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <fsm_control_system+0x1f0>)
 80019ba:	6013      	str	r3, [r2, #0]
			  counter1_1++;
 80019bc:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <fsm_control_system+0x1f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <fsm_control_system+0x1f8>)
 80019c4:	6013      	str	r3, [r2, #0]
			  counter2_1_temp=counter2_1;
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <fsm_control_system+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <fsm_control_system+0x204>)
 80019cc:	6013      	str	r3, [r2, #0]
			  counter1_1_temp=counter1_1;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <fsm_control_system+0x1f8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <fsm_control_system+0x208>)
 80019d4:	6013      	str	r3, [r2, #0]
		  }
		 if(isButton3Pressed()==1)
 80019d6:	f7fe fbdd 	bl	8000194 <isButton3Pressed>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d113      	bne.n	8001a08 <fsm_control_system+0xfc>
		 {
			time_red_1 =time_red_1_save;
 80019e0:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <fsm_control_system+0x20c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <fsm_control_system+0x200>)
 80019e6:	6013      	str	r3, [r2, #0]
			 time_red_2=time_red_2_save;
 80019e8:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <fsm_control_system+0x210>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <fsm_control_system+0x1fc>)
 80019ee:	6013      	str	r3, [r2, #0]
			 counter2_1=5;
 80019f0:	4b42      	ldr	r3, [pc, #264]	; (8001afc <fsm_control_system+0x1f0>)
 80019f2:	2205      	movs	r2, #5
 80019f4:	601a      	str	r2, [r3, #0]
			 counter1_1=5;
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <fsm_control_system+0x1f8>)
 80019f8:	2205      	movs	r2, #5
 80019fa:	601a      	str	r2, [r3, #0]
			 counter2_1_temp=5;
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <fsm_control_system+0x204>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	601a      	str	r2, [r3, #0]
			 counter1_1_temp=5;
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <fsm_control_system+0x208>)
 8001a04:	2205      	movs	r2, #5
 8001a06:	601a      	str	r2, [r3, #0]
		 }


  		 if(isButton1Pressed()==1)
 8001a08:	f7fe fba0 	bl	800014c <isButton1Pressed>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f040 810b 	bne.w	8001c2a <fsm_control_system+0x31e>
  		{
  			status_control_system=SET3;
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <fsm_control_system+0x1d8>)
 8001a16:	220f      	movs	r2, #15
 8001a18:	601a      	str	r2, [r3, #0]
  		}

  		break;
 8001a1a:	e106      	b.n	8001c2a <fsm_control_system+0x31e>
  	case SET3: //led_green
		  status=off_ledgreen_2;
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <fsm_control_system+0x1dc>)
 8001a1e:	2267      	movs	r2, #103	; 0x67
 8001a20:	601a      	str	r2, [r3, #0]
		  status_2=off_ledgreen_1;
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <fsm_control_system+0x1e0>)
 8001a24:	2267      	movs	r2, #103	; 0x67
 8001a26:	601a      	str	r2, [r3, #0]
		  status_7seg2=stop_led_green2;
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <fsm_control_system+0x1e4>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	601a      	str	r2, [r3, #0]
		  status_7seg1=stop_led_green1;
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <fsm_control_system+0x1e8>)
 8001a30:	2206      	movs	r2, #6
 8001a32:	601a      	str	r2, [r3, #0]
		  if(co_led_green_2==1)
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <fsm_control_system+0x214>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <fsm_control_system+0x13c>
		  {
			  counter2_2=3;
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <fsm_control_system+0x218>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
			  co_led_green_2=0;
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <fsm_control_system+0x214>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
		  }
		  if(co_led_green_1==1)
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <fsm_control_system+0x21c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <fsm_control_system+0x150>
		  {
			  counter1_2=3;
 8001a50:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <fsm_control_system+0x220>)
 8001a52:	2203      	movs	r2, #3
 8001a54:	601a      	str	r2, [r3, #0]
			  co_led_green_1=0;
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <fsm_control_system+0x21c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
		  }
		  if(isButton2Pressed()==1)
 8001a5c:	f7fe fb88 	bl	8000170 <isButton2Pressed>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11b      	bne.n	8001a9e <fsm_control_system+0x192>
		  		  {
		  			  time_green_2++;
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <fsm_control_system+0x224>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <fsm_control_system+0x224>)
 8001a6e:	6013      	str	r3, [r2, #0]
		  			  time_green_1++;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <fsm_control_system+0x228>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <fsm_control_system+0x228>)
 8001a78:	6013      	str	r3, [r2, #0]
					  counter2_2++;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <fsm_control_system+0x218>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <fsm_control_system+0x218>)
 8001a82:	6013      	str	r3, [r2, #0]
					  counter1_2++;
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <fsm_control_system+0x220>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <fsm_control_system+0x220>)
 8001a8c:	6013      	str	r3, [r2, #0]
					  counter2_2_temp=counter2_2;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <fsm_control_system+0x218>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <fsm_control_system+0x22c>)
 8001a94:	6013      	str	r3, [r2, #0]
					  counter1_2_temp=counter1_2;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <fsm_control_system+0x220>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <fsm_control_system+0x230>)
 8001a9c:	6013      	str	r3, [r2, #0]


		  		  }
		  		 if(isButton3Pressed()==1)
 8001a9e:	f7fe fb79 	bl	8000194 <isButton3Pressed>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d113      	bne.n	8001ad0 <fsm_control_system+0x1c4>
		  		 {
		  			 time_green_1=time_green_1_save;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <fsm_control_system+0x234>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <fsm_control_system+0x228>)
 8001aae:	6013      	str	r3, [r2, #0]
		  			 time_green_2=time_green_2_save;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <fsm_control_system+0x238>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <fsm_control_system+0x224>)
 8001ab6:	6013      	str	r3, [r2, #0]
					 counter2_2=3;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <fsm_control_system+0x218>)
 8001aba:	2203      	movs	r2, #3
 8001abc:	601a      	str	r2, [r3, #0]
					 counter1_2=3;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <fsm_control_system+0x220>)
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	601a      	str	r2, [r3, #0]
					 counter2_2_temp=3;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <fsm_control_system+0x22c>)
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	601a      	str	r2, [r3, #0]
					 counter1_2_temp=3;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <fsm_control_system+0x230>)
 8001acc:	2203      	movs	r2, #3
 8001ace:	601a      	str	r2, [r3, #0]
		  		 }
			 if(isButton1Pressed()==1)
 8001ad0:	f7fe fb3c 	bl	800014c <isButton1Pressed>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 80a9 	bne.w	8001c2e <fsm_control_system+0x322>
	  		{
	  			status_control_system=SET4;
 8001adc:	4b01      	ldr	r3, [pc, #4]	; (8001ae4 <fsm_control_system+0x1d8>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	601a      	str	r2, [r3, #0]
	  		}

  		break;
 8001ae2:	e0a4      	b.n	8001c2e <fsm_control_system+0x322>
 8001ae4:	200000f0 	.word	0x200000f0
 8001ae8:	200000f4 	.word	0x200000f4
 8001aec:	200000f8 	.word	0x200000f8
 8001af0:	20000100 	.word	0x20000100
 8001af4:	200000fc 	.word	0x200000fc
 8001af8:	200000d8 	.word	0x200000d8
 8001afc:	20000034 	.word	0x20000034
 8001b00:	200000e4 	.word	0x200000e4
 8001b04:	20000040 	.word	0x20000040
 8001b08:	20000064 	.word	0x20000064
 8001b0c:	20000070 	.word	0x20000070
 8001b10:	2000004c 	.word	0x2000004c
 8001b14:	20000058 	.word	0x20000058
 8001b18:	20000088 	.word	0x20000088
 8001b1c:	2000007c 	.word	0x2000007c
 8001b20:	200000dc 	.word	0x200000dc
 8001b24:	20000038 	.word	0x20000038
 8001b28:	200000e8 	.word	0x200000e8
 8001b2c:	20000044 	.word	0x20000044
 8001b30:	2000006c 	.word	0x2000006c
 8001b34:	20000078 	.word	0x20000078
 8001b38:	20000050 	.word	0x20000050
 8001b3c:	2000005c 	.word	0x2000005c
 8001b40:	20000090 	.word	0x20000090
 8001b44:	20000084 	.word	0x20000084
  	case SET4: //led_yellow
		  status=off_ledyellow_2;
 8001b48:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <fsm_control_system+0x32c>)
 8001b4a:	2266      	movs	r2, #102	; 0x66
 8001b4c:	601a      	str	r2, [r3, #0]
		  status_2=off_ledyellow_1;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <fsm_control_system+0x330>)
 8001b50:	2266      	movs	r2, #102	; 0x66
 8001b52:	601a      	str	r2, [r3, #0]
		  status_7seg2=stop_led_yellow2;
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <fsm_control_system+0x334>)
 8001b56:	2205      	movs	r2, #5
 8001b58:	601a      	str	r2, [r3, #0]
		  status_7seg1=stop_led_yellow1;
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <fsm_control_system+0x338>)
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	601a      	str	r2, [r3, #0]
		  if(co_led_yellow_2==1)
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <fsm_control_system+0x33c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <fsm_control_system+0x268>
		  {
			  counter2_3=2;
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <fsm_control_system+0x340>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
			  co_led_yellow_2=0;
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <fsm_control_system+0x33c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
		  }
		  if(co_led_yellow_1==1)
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <fsm_control_system+0x344>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <fsm_control_system+0x27c>
			  {
			  counter1_3=2;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <fsm_control_system+0x348>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
				  co_led_yellow_1=0;
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <fsm_control_system+0x344>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
			  }
		  if(isButton2Pressed()==1)
 8001b88:	f7fe faf2 	bl	8000170 <isButton2Pressed>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11b      	bne.n	8001bca <fsm_control_system+0x2be>
			  		  {
			  			  time_yellow_2++;
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <fsm_control_system+0x34c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <fsm_control_system+0x34c>)
 8001b9a:	6013      	str	r3, [r2, #0]
			  			  time_yellow_1++;
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <fsm_control_system+0x350>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <fsm_control_system+0x350>)
 8001ba4:	6013      	str	r3, [r2, #0]
						  counter2_3++;
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <fsm_control_system+0x340>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <fsm_control_system+0x340>)
 8001bae:	6013      	str	r3, [r2, #0]
						  counter1_3++;
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <fsm_control_system+0x348>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <fsm_control_system+0x348>)
 8001bb8:	6013      	str	r3, [r2, #0]
						  counter2_3_temp=counter2_3;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <fsm_control_system+0x340>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <fsm_control_system+0x354>)
 8001bc0:	6013      	str	r3, [r2, #0]
						  counter1_3_temp=counter1_3;
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <fsm_control_system+0x348>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <fsm_control_system+0x358>)
 8001bc8:	6013      	str	r3, [r2, #0]

			  		  }
			  		 if(isButton3Pressed()==1)
 8001bca:	f7fe fae3 	bl	8000194 <isButton3Pressed>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d113      	bne.n	8001bfc <fsm_control_system+0x2f0>
			  		 {
			  			 time_yellow_1=time_yellow_1_save;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <fsm_control_system+0x35c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <fsm_control_system+0x350>)
 8001bda:	6013      	str	r3, [r2, #0]
			  			 time_yellow_2=time_yellow_2_save;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <fsm_control_system+0x360>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <fsm_control_system+0x34c>)
 8001be2:	6013      	str	r3, [r2, #0]
						 counter2_3=2;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <fsm_control_system+0x340>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
						 counter1_3=2;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <fsm_control_system+0x348>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
						 counter1_3_temp=2;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <fsm_control_system+0x358>)
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	601a      	str	r2, [r3, #0]
						 counter2_3_temp=2;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <fsm_control_system+0x354>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	601a      	str	r2, [r3, #0]
			  		 }
  		if(isButton1Pressed()==1)
 8001bfc:	f7fe faa6 	bl	800014c <isButton1Pressed>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d115      	bne.n	8001c32 <fsm_control_system+0x326>
  		{
  			status_control_system=Normal_set;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <fsm_control_system+0x364>)
 8001c08:	220c      	movs	r2, #12
 8001c0a:	601a      	str	r2, [r3, #0]
  				    status=INIT;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <fsm_control_system+0x32c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  			  	    status_2=INIT_2;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <fsm_control_system+0x330>)
 8001c14:	2205      	movs	r2, #5
 8001c16:	601a      	str	r2, [r3, #0]
  			  		status_7seg2=led7seg2_red;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <fsm_control_system+0x334>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
  			  		status_7seg1=led7seg1_green;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <fsm_control_system+0x338>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  		}

		  break;
 8001c24:	e005      	b.n	8001c32 <fsm_control_system+0x326>
  		break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <fsm_control_system+0x328>
  		break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <fsm_control_system+0x328>
  		break;
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <fsm_control_system+0x328>
		  break;
 8001c32:	bf00      	nop

  	}


}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200000f4 	.word	0x200000f4
 8001c3c:	200000f8 	.word	0x200000f8
 8001c40:	20000100 	.word	0x20000100
 8001c44:	200000fc 	.word	0x200000fc
 8001c48:	200000e0 	.word	0x200000e0
 8001c4c:	2000003c 	.word	0x2000003c
 8001c50:	200000ec 	.word	0x200000ec
 8001c54:	20000048 	.word	0x20000048
 8001c58:	20000068 	.word	0x20000068
 8001c5c:	20000074 	.word	0x20000074
 8001c60:	20000054 	.word	0x20000054
 8001c64:	20000060 	.word	0x20000060
 8001c68:	2000008c 	.word	0x2000008c
 8001c6c:	20000080 	.word	0x20000080
 8001c70:	200000f0 	.word	0x200000f0

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f000 fd22 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f862 	bl	8001d44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  setTimer4(10);
 8001c80:	200a      	movs	r0, #10
 8001c82:	f000 fb37 	bl	80022f4 <setTimer4>
  setTimer2(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f000 fb6c 	bl	8002364 <setTimer2>
  setTimer3(10);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f000 fb4d 	bl	800232c <setTimer3>
  setTimer1(10);
 8001c92:	200a      	movs	r0, #10
 8001c94:	f000 fb82 	bl	800239c <setTimer1>
  setTimer(10);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f000 fb9b 	bl	80023d4 <setTimer>
  setTimer5(10);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f000 fb0c 	bl	80022bc <setTimer5>
  setTimer6(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 faed 	bl	8002284 <setTimer6>
  setTimer_system(10);
 8001caa:	200a      	movs	r0, #10
 8001cac:	f000 face 	bl	800224c <setTimer_system>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb0:	f000 f8d0 	bl	8001e54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cb4:	f000 f882 	bl	8001dbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001cb8:	4817      	ldr	r0, [pc, #92]	; (8001d18 <main+0xa4>)
 8001cba:	f001 fc47 	bl	800354c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

    SCH_Init();
 8001cbe:	f000 f981 	bl	8001fc4 <SCH_Init>
    status=INIT;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <main+0xa8>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
    status_2=INIT_2;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <main+0xac>)
 8001cca:	2205      	movs	r2, #5
 8001ccc:	601a      	str	r2, [r3, #0]
	status_7seg2=led7seg2_red;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <main+0xb0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
	status_7seg1=led7seg1_green;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <main+0xb4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
	status_control_system=Normal_set;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <main+0xb8>)
 8001cdc:	220c      	movs	r2, #12
 8001cde:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_control_system, 0, TIME_SYSTEM);
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <main+0xbc>)
 8001ce6:	f000 f987 	bl	8001ff8 <SCH_Add_Task>
	SCH_Add_Task(fsm_automaticRun, 0, TIME_SYSTEM);
 8001cea:	220a      	movs	r2, #10
 8001cec:	2100      	movs	r1, #0
 8001cee:	4811      	ldr	r0, [pc, #68]	; (8001d34 <main+0xc0>)
 8001cf0:	f000 f982 	bl	8001ff8 <SCH_Add_Task>
	SCH_Add_Task(fsm_7seg2, 0, TIME_SYSTEM);
 8001cf4:	220a      	movs	r2, #10
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <main+0xc4>)
 8001cfa:	f000 f97d 	bl	8001ff8 <SCH_Add_Task>
	SCH_Add_Task(fsm_automaticRun2, 0, TIME_SYSTEM);
 8001cfe:	220a      	movs	r2, #10
 8001d00:	2100      	movs	r1, #0
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <main+0xc8>)
 8001d04:	f000 f978 	bl	8001ff8 <SCH_Add_Task>
	SCH_Add_Task(fsm_7seg1, 0, TIME_SYSTEM);
 8001d08:	220a      	movs	r2, #10
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <main+0xcc>)
 8001d0e:	f000 f973 	bl	8001ff8 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */

	  SCH_Dispatch_Tasks();
 8001d12:	f000 fa27 	bl	8002164 <SCH_Dispatch_Tasks>
 8001d16:	e7fc      	b.n	8001d12 <main+0x9e>
 8001d18:	200004a0 	.word	0x200004a0
 8001d1c:	200000f4 	.word	0x200000f4
 8001d20:	200000f8 	.word	0x200000f8
 8001d24:	20000100 	.word	0x20000100
 8001d28:	200000fc 	.word	0x200000fc
 8001d2c:	200000f0 	.word	0x200000f0
 8001d30:	0800190d 	.word	0x0800190d
 8001d34:	08000fc5 	.word	0x08000fc5
 8001d38:	0800139d 	.word	0x0800139d
 8001d3c:	080011c9 	.word	0x080011c9
 8001d40:	08001655 	.word	0x08001655

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b090      	sub	sp, #64	; 0x40
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0318 	add.w	r3, r7, #24
 8001d4e:	2228      	movs	r2, #40	; 0x28
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 ffaa 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d76:	f107 0318 	add.w	r3, r7, #24
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 ffba 	bl	8002cf4 <HAL_RCC_OscConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001d86:	f000 f8dc 	bl	8001f42 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fa26 	bl	80031f4 <HAL_RCC_ClockConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001dae:	f000 f8c8 	bl	8001f42 <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3740      	adds	r7, #64	; 0x40
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001de2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001df0:	2209      	movs	r2, #9
 8001df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e02:	f001 fb53 	bl	80034ac <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e0c:	f000 f899 	bl	8001f42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e1e:	f001 fcd1 	bl	80037c4 <HAL_TIM_ConfigClockSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e28:	f000 f88b 	bl	8001f42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e3a:	f001 fea9 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e44:	f000 f87d 	bl	8001f42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200004a0 	.word	0x200004a0

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <MX_GPIO_Init+0xbc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|SEG_A2_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001e9e:	481d      	ldr	r0, [pc, #116]	; (8001f14 <MX_GPIO_Init+0xc0>)
 8001ea0:	f000 ff0f 	bl	8002cc2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin
                          |SEG_B2_Pin|SEG_C2_Pin|SEG_D2_Pin|SEG_E2_Pin
                          |SEG_F2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A1_Pin|SEG_B1_Pin|SEG_C1_Pin|EN1_Pin
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8001eaa:	481b      	ldr	r0, [pc, #108]	; (8001f18 <MX_GPIO_Init+0xc4>)
 8001eac:	f000 ff09 	bl	8002cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin SEG_A2_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_YELLOW_1_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_YELLOW_2_Pin
                           SEG_B2_Pin SEG_C2_Pin SEG_D2_Pin SEG_E2_Pin
                           SEG_F2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|SEG_A2_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8001eb0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001eb4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin
                          |SEG_B2_Pin|SEG_C2_Pin|SEG_D2_Pin|SEG_E2_Pin
                          |SEG_F2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <MX_GPIO_Init+0xc0>)
 8001eca:	f000 fd69 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A1_Pin SEG_B1_Pin SEG_C1_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN0_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_G2_Pin */
  GPIO_InitStruct.Pin = SEG_A1_Pin|SEG_B1_Pin|SEG_C1_Pin|EN1_Pin
 8001ece:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001ed2:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN0_Pin|SEG_D1_Pin
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2302      	movs	r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_GPIO_Init+0xc4>)
 8001ee8:	f000 fd5a 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001eec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_GPIO_Init+0xc4>)
 8001f02:	f000 fd4d 	bl	80029a0 <HAL_GPIO_Init>

}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00

08001f1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001f2e:	f000 f8b9 	bl	80020a4 <SCH_Update>
	}
	getKeyInput();
 8001f32:	f7fe f941 	bl	80001b8 <getKeyInput>
	timeRun();
 8001f36:	f000 fa69 	bl	800240c <timeRun>

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f46:	b672      	cpsid	i
}
 8001f48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <Error_Handler+0x8>

08001f4c <SCH_Delete_Task>:
//}
#include "scheduler.h"

unsigned char current_index_task = 0;

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX){
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code ;
	SCH_tasks_G [TASK_INDEX].pTask = 0x0000 ;
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	4918      	ldr	r1, [pc, #96]	; (8001fbc <SCH_Delete_Task+0x70>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [TASK_INDEX].Delay = 0;
 8001f68:	79fa      	ldrb	r2, [r7, #7]
 8001f6a:	4914      	ldr	r1, [pc, #80]	; (8001fbc <SCH_Delete_Task+0x70>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3304      	adds	r3, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [TASK_INDEX].Period = 0;
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	490f      	ldr	r1, [pc, #60]	; (8001fbc <SCH_Delete_Task+0x70>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [TASK_INDEX].RunMe = 0;
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <SCH_Delete_Task+0x70>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SCH_Delete_Task+0x74>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SCH_Delete_Task+0x74>)
 8001fae:	701a      	strb	r2, [r3, #0]
	return Return_code ; // return status
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000180 	.word	0x20000180
 8001fc0:	2000013c 	.word	0x2000013c

08001fc4 <SCH_Init>:
void SCH_Init(void){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	unsigned char i ;
	for(i = 0; i < current_index_task; i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e006      	b.n	8001fde <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ffba 	bl	8001f4c <SCH_Delete_Task>
	for(i = 0; i < current_index_task; i++){
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	71fb      	strb	r3, [r7, #7]
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SCH_Init+0x30>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	79fa      	ldrb	r2, [r7, #7]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3f3      	bcc.n	8001fd0 <SCH_Init+0xc>
	}
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000013c 	.word	0x2000013c

08001ff8 <SCH_Add_Task>:
void SCH_Add_Task( void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <SCH_Add_Task+0xa4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b27      	cmp	r3, #39	; 0x27
 800200a:	d842      	bhi.n	8002092 <SCH_Add_Task+0x9a>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <SCH_Add_Task+0xa4>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <SCH_Add_Task+0xa8>)
 8002014:	460b      	mov	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <SCH_Add_Task+0xa4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <SCH_Add_Task+0xa8>)
 800202a:	460b      	mov	r3, r1
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <SCH_Add_Task+0xa4>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <SCH_Add_Task+0xa8>)
 8002042:	460b      	mov	r3, r1
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3308      	adds	r3, #8
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <SCH_Add_Task+0xa4>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <SCH_Add_Task+0xa8>)
 800205a:	460b      	mov	r3, r1
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	330c      	adds	r3, #12
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <SCH_Add_Task+0xa4>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <SCH_Add_Task+0xa4>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SCH_Add_Task+0xa8>)
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3310      	adds	r3, #16
 8002084:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <SCH_Add_Task+0xa4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b03      	ldr	r3, [pc, #12]	; (800209c <SCH_Add_Task+0xa4>)
 8002090:	701a      	strb	r2, [r3, #0]
	}
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	2000013c 	.word	0x2000013c
 80020a0:	20000180 	.word	0x20000180

080020a4 <SCH_Update>:

void SCH_Update(void){
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	e048      	b.n	8002142 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0){
 80020b0:	492a      	ldr	r1, [pc, #168]	; (800215c <SCH_Update+0xb8>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 80020c6:	4925      	ldr	r1, [pc, #148]	; (800215c <SCH_Update+0xb8>)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1e59      	subs	r1, r3, #1
 80020da:	4820      	ldr	r0, [pc, #128]	; (800215c <SCH_Update+0xb8>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4403      	add	r3, r0
 80020e8:	3304      	adds	r3, #4
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	e026      	b.n	800213c <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80020ee:	491b      	ldr	r1, [pc, #108]	; (800215c <SCH_Update+0xb8>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3308      	adds	r3, #8
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <SCH_Update+0xb8>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4403      	add	r3, r0
 800210e:	3304      	adds	r3, #4
 8002110:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8002112:	4912      	ldr	r1, [pc, #72]	; (800215c <SCH_Update+0xb8>)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	330c      	adds	r3, #12
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	b2d8      	uxtb	r0, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <SCH_Update+0xb8>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	330c      	adds	r3, #12
 8002138:	4602      	mov	r2, r0
 800213a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3301      	adds	r3, #1
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <SCH_Update+0xbc>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4293      	cmp	r3, r2
 800214c:	dbb0      	blt.n	80020b0 <SCH_Update+0xc>
		}
	}
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000180 	.word	0x20000180
 8002160:	2000013c 	.word	0x2000013c

08002164 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	e05d      	b.n	800222c <SCH_Dispatch_Tasks+0xc8>
		if(i == 3){// one-shot task
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d12e      	bne.n	80021d4 <SCH_Dispatch_Tasks+0x70>
			if(SCH_tasks_G[i].RunMe > 0){
 8002176:	4933      	ldr	r1, [pc, #204]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	330c      	adds	r3, #12
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d04c      	beq.n	8002226 <SCH_Dispatch_Tasks+0xc2>
				SCH_tasks_G[i].RunMe--;
 800218c:	492d      	ldr	r1, [pc, #180]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	330c      	adds	r3, #12
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	b2d8      	uxtb	r0, r3
 80021a2:	4928      	ldr	r1, [pc, #160]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	330c      	adds	r3, #12
 80021b2:	4602      	mov	r2, r0
 80021b4:	701a      	strb	r2, [r3, #0]
				(*SCH_tasks_G[i].pTask)();
 80021b6:	4923      	ldr	r1, [pc, #140]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4798      	blx	r3
				SCH_Delete_Task(i);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff febd 	bl	8001f4c <SCH_Delete_Task>
 80021d2:	e028      	b.n	8002226 <SCH_Dispatch_Tasks+0xc2>
			}
			//delete task out of SCH_tasks_G
		}
		else{
			if(SCH_tasks_G[i].RunMe > 0){
 80021d4:	491b      	ldr	r1, [pc, #108]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	330c      	adds	r3, #12
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01d      	beq.n	8002226 <SCH_Dispatch_Tasks+0xc2>
				SCH_tasks_G[i].RunMe--;
 80021ea:	4916      	ldr	r1, [pc, #88]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	330c      	adds	r3, #12
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	4910      	ldr	r1, [pc, #64]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	330c      	adds	r3, #12
 8002210:	4602      	mov	r2, r0
 8002212:	701a      	strb	r2, [r3, #0]
				(*SCH_tasks_G[i].pTask)();
 8002214:	490b      	ldr	r1, [pc, #44]	; (8002244 <SCH_Dispatch_Tasks+0xe0>)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4798      	blx	r3
	for(int i = 0; i < current_index_task; i++){
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <SCH_Dispatch_Tasks+0xe4>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4293      	cmp	r3, r2
 8002236:	db9b      	blt.n	8002170 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000180 	.word	0x20000180
 8002248:	2000013c 	.word	0x2000013c

0800224c <setTimer_system>:
int timer_counter6=0;
int timer_flag6=0;
int timer_counter_system=0;
int timer_flag_system=0;
void setTimer_system(int duration)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	timer_counter_system = duration/timer_cycle;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <setTimer_system+0x2c>)
 8002258:	fb82 1203 	smull	r1, r2, r2, r3
 800225c:	1092      	asrs	r2, r2, #2
 800225e:	17db      	asrs	r3, r3, #31
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <setTimer_system+0x30>)
 8002264:	6013      	str	r3, [r2, #0]
	timer_flag_system = 0;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <setTimer_system+0x34>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	66666667 	.word	0x66666667
 800227c:	20000178 	.word	0x20000178
 8002280:	2000017c 	.word	0x2000017c

08002284 <setTimer6>:
void setTimer6(int duration){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	timer_counter6 = duration/timer_cycle;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <setTimer6+0x2c>)
 8002290:	fb82 1203 	smull	r1, r2, r2, r3
 8002294:	1092      	asrs	r2, r2, #2
 8002296:	17db      	asrs	r3, r3, #31
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <setTimer6+0x30>)
 800229c:	6013      	str	r3, [r2, #0]
	timer_flag6 = 0;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <setTimer6+0x34>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	66666667 	.word	0x66666667
 80022b4:	20000170 	.word	0x20000170
 80022b8:	20000174 	.word	0x20000174

080022bc <setTimer5>:
void setTimer5(int duration){
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	timer_counter5 = duration/timer_cycle;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <setTimer5+0x2c>)
 80022c8:	fb82 1203 	smull	r1, r2, r2, r3
 80022cc:	1092      	asrs	r2, r2, #2
 80022ce:	17db      	asrs	r3, r3, #31
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	4a06      	ldr	r2, [pc, #24]	; (80022ec <setTimer5+0x30>)
 80022d4:	6013      	str	r3, [r2, #0]
	timer_flag5 = 0;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <setTimer5+0x34>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	66666667 	.word	0x66666667
 80022ec:	20000168 	.word	0x20000168
 80022f0:	2000016c 	.word	0x2000016c

080022f4 <setTimer4>:
void setTimer4(int duration){
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	timer_counter4 = duration/timer_cycle;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <setTimer4+0x2c>)
 8002300:	fb82 1203 	smull	r1, r2, r2, r3
 8002304:	1092      	asrs	r2, r2, #2
 8002306:	17db      	asrs	r3, r3, #31
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	4a06      	ldr	r2, [pc, #24]	; (8002324 <setTimer4+0x30>)
 800230c:	6013      	str	r3, [r2, #0]
	timer_flag4 = 0;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <setTimer4+0x34>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	66666667 	.word	0x66666667
 8002324:	20000160 	.word	0x20000160
 8002328:	20000164 	.word	0x20000164

0800232c <setTimer3>:
void setTimer3(int duration){
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	timer_counter3 = duration/timer_cycle;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <setTimer3+0x2c>)
 8002338:	fb82 1203 	smull	r1, r2, r2, r3
 800233c:	1092      	asrs	r2, r2, #2
 800233e:	17db      	asrs	r3, r3, #31
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <setTimer3+0x30>)
 8002344:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <setTimer3+0x34>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	66666667 	.word	0x66666667
 800235c:	20000158 	.word	0x20000158
 8002360:	2000015c 	.word	0x2000015c

08002364 <setTimer2>:
void setTimer2(int duration)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	timer_counter_7seg2 = duration/timer_cycle;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <setTimer2+0x2c>)
 8002370:	fb82 1203 	smull	r1, r2, r2, r3
 8002374:	1092      	asrs	r2, r2, #2
 8002376:	17db      	asrs	r3, r3, #31
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <setTimer2+0x30>)
 800237c:	6013      	str	r3, [r2, #0]
	timer_flag_7seg2 = 0;
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <setTimer2+0x34>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	66666667 	.word	0x66666667
 8002394:	20000150 	.word	0x20000150
 8002398:	20000154 	.word	0x20000154

0800239c <setTimer1>:
void setTimer1(int duration){
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	timer_counter1 = duration/timer_cycle;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <setTimer1+0x2c>)
 80023a8:	fb82 1203 	smull	r1, r2, r2, r3
 80023ac:	1092      	asrs	r2, r2, #2
 80023ae:	17db      	asrs	r3, r3, #31
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	4a06      	ldr	r2, [pc, #24]	; (80023cc <setTimer1+0x30>)
 80023b4:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <setTimer1+0x34>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	66666667 	.word	0x66666667
 80023cc:	20000148 	.word	0x20000148
 80023d0:	2000014c 	.word	0x2000014c

080023d4 <setTimer>:
void setTimer(int duration){
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	timer_counter = duration/timer_cycle;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <setTimer+0x2c>)
 80023e0:	fb82 1203 	smull	r1, r2, r2, r3
 80023e4:	1092      	asrs	r2, r2, #2
 80023e6:	17db      	asrs	r3, r3, #31
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a06      	ldr	r2, [pc, #24]	; (8002404 <setTimer+0x30>)
 80023ec:	6013      	str	r3, [r2, #0]
	timer_flag = 0;
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <setTimer+0x34>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	66666667 	.word	0x66666667
 8002404:	20000140 	.word	0x20000140
 8002408:	20000144 	.word	0x20000144

0800240c <timeRun>:
void timeRun()
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	if(timer_counter > 0) {timer_counter--;
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <timeRun+0x10c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	dd0b      	ble.n	8002430 <timeRun+0x24>
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <timeRun+0x10c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <timeRun+0x10c>)
 8002420:	6013      	str	r3, [r2, #0]
	if(timer_counter == 0){
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <timeRun+0x10c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <timeRun+0x24>
		timer_flag = 1;
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <timeRun+0x110>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]
	}}
	if(timer_counter1 > 0) {timer_counter1--;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <timeRun+0x114>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	dd0b      	ble.n	8002450 <timeRun+0x44>
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <timeRun+0x114>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	4a38      	ldr	r2, [pc, #224]	; (8002520 <timeRun+0x114>)
 8002440:	6013      	str	r3, [r2, #0]
	if(timer_counter1 == 0){
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <timeRun+0x114>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <timeRun+0x44>
		timer_flag1 = 1;
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <timeRun+0x118>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]
	}}
	if(timer_counter_7seg2 > 0) {timer_counter_7seg2--;
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <timeRun+0x11c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	dd0b      	ble.n	8002470 <timeRun+0x64>
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <timeRun+0x11c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3b01      	subs	r3, #1
 800245e:	4a32      	ldr	r2, [pc, #200]	; (8002528 <timeRun+0x11c>)
 8002460:	6013      	str	r3, [r2, #0]
		if(timer_counter_7seg2 == 0){
 8002462:	4b31      	ldr	r3, [pc, #196]	; (8002528 <timeRun+0x11c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <timeRun+0x64>
			timer_flag_7seg2 = 1;
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <timeRun+0x120>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
		}}
	if(timer_counter3 > 0) {timer_counter3--;
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <timeRun+0x124>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	dd0b      	ble.n	8002490 <timeRun+0x84>
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <timeRun+0x124>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	4a2c      	ldr	r2, [pc, #176]	; (8002530 <timeRun+0x124>)
 8002480:	6013      	str	r3, [r2, #0]
		if(timer_counter3 == 0){
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <timeRun+0x124>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <timeRun+0x84>
			timer_flag3 = 1;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <timeRun+0x128>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
		}}
	if(timer_counter4 > 0) {timer_counter4--;
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <timeRun+0x12c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd0b      	ble.n	80024b0 <timeRun+0xa4>
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <timeRun+0x12c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4a26      	ldr	r2, [pc, #152]	; (8002538 <timeRun+0x12c>)
 80024a0:	6013      	str	r3, [r2, #0]
		if(timer_counter4 == 0){
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <timeRun+0x12c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <timeRun+0xa4>
			timer_flag4 = 1;
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <timeRun+0x130>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
		}}
	if(timer_counter5 > 0) {timer_counter5--;
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <timeRun+0x134>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dd0b      	ble.n	80024d0 <timeRun+0xc4>
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <timeRun+0x134>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <timeRun+0x134>)
 80024c0:	6013      	str	r3, [r2, #0]
		if(timer_counter5 == 0){
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <timeRun+0x134>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <timeRun+0xc4>
			timer_flag5 = 1;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <timeRun+0x138>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
		}}
	if(timer_counter6 > 0) {timer_counter6--;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <timeRun+0x13c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	dd0b      	ble.n	80024f0 <timeRun+0xe4>
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <timeRun+0x13c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <timeRun+0x13c>)
 80024e0:	6013      	str	r3, [r2, #0]
		if(timer_counter6 == 0){
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <timeRun+0x13c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <timeRun+0xe4>
			timer_flag6 = 1;
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <timeRun+0x140>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
		}}
	if(timer_counter_system > 0) {timer_counter_system--;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <timeRun+0x144>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dd0b      	ble.n	8002510 <timeRun+0x104>
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <timeRun+0x144>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <timeRun+0x144>)
 8002500:	6013      	str	r3, [r2, #0]
		if(timer_counter_system == 0){
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <timeRun+0x144>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <timeRun+0x104>
			timer_flag_system = 1;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <timeRun+0x148>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]
		}}




}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000140 	.word	0x20000140
 800251c:	20000144 	.word	0x20000144
 8002520:	20000148 	.word	0x20000148
 8002524:	2000014c 	.word	0x2000014c
 8002528:	20000150 	.word	0x20000150
 800252c:	20000154 	.word	0x20000154
 8002530:	20000158 	.word	0x20000158
 8002534:	2000015c 	.word	0x2000015c
 8002538:	20000160 	.word	0x20000160
 800253c:	20000164 	.word	0x20000164
 8002540:	20000168 	.word	0x20000168
 8002544:	2000016c 	.word	0x2000016c
 8002548:	20000170 	.word	0x20000170
 800254c:	20000174 	.word	0x20000174
 8002550:	20000178 	.word	0x20000178
 8002554:	2000017c 	.word	0x2000017c

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_MspInit+0x5c>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_MspInit+0x5c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_MspInit+0x5c>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_MspInit+0x5c>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_MspInit+0x5c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_MspInit+0x5c>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_MspInit+0x60>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_MspInit+0x60>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d113      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_TIM_Base_MspInit+0x44>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <HAL_TIM_Base_MspInit+0x44>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_TIM_Base_MspInit+0x44>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	201c      	movs	r0, #28
 80025ec:	f000 f9a1 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025f0:	201c      	movs	r0, #28
 80025f2:	f000 f9ba 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <NMI_Handler+0x4>

0800260a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <MemManage_Handler+0x4>

08002616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <UsageFault_Handler+0x4>

08002622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264a:	f000 f87f 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIM2_IRQHandler+0x10>)
 800265a:	f000 ffc3 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200004a0 	.word	0x200004a0

08002668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002674:	f7ff fff8 	bl	8002668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800267a:	490c      	ldr	r1, [pc, #48]	; (80026ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002690:	4c09      	ldr	r4, [pc, #36]	; (80026b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f001 fae1 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026a2:	f7ff fae7 	bl	8001c74 <main>
  bx lr
 80026a6:	4770      	bx	lr
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80026b0:	08003d00 	.word	0x08003d00
  ldr r2, =_sbss
 80026b4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80026b8:	200004ec 	.word	0x200004ec

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x28>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x28>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f923 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff ff3c 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f93b 	bl	8002986 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 f903 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000098 	.word	0x20000098
 8002744:	200000a0 	.word	0x200000a0
 8002748:	2000009c 	.word	0x2000009c

0800274c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_IncTick+0x1c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x20>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_IncTick+0x20>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	200000a0 	.word	0x200000a0
 800276c:	200004e8 	.word	0x200004e8

08002770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <HAL_GetTick+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	200004e8 	.word	0x200004e8

08002784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4906      	ldr	r1, [pc, #24]	; (800281c <__NVIC_EnableIRQ+0x34>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff90 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff2d 	bl	8002784 <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff42 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff90 	bl	8002874 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5f 	bl	8002820 <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff35 	bl	80027e8 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b08b      	sub	sp, #44	; 0x2c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b2:	e148      	b.n	8002c46 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029b4:	2201      	movs	r2, #1
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 8137 	bne.w	8002c40 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4aa3      	ldr	r2, [pc, #652]	; (8002c64 <HAL_GPIO_Init+0x2c4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d05e      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
 80029dc:	4aa1      	ldr	r2, [pc, #644]	; (8002c64 <HAL_GPIO_Init+0x2c4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d875      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 80029e2:	4aa1      	ldr	r2, [pc, #644]	; (8002c68 <HAL_GPIO_Init+0x2c8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d058      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
 80029e8:	4a9f      	ldr	r2, [pc, #636]	; (8002c68 <HAL_GPIO_Init+0x2c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d86f      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 80029ee:	4a9f      	ldr	r2, [pc, #636]	; (8002c6c <HAL_GPIO_Init+0x2cc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d052      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
 80029f4:	4a9d      	ldr	r2, [pc, #628]	; (8002c6c <HAL_GPIO_Init+0x2cc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d869      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 80029fa:	4a9d      	ldr	r2, [pc, #628]	; (8002c70 <HAL_GPIO_Init+0x2d0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d04c      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
 8002a00:	4a9b      	ldr	r2, [pc, #620]	; (8002c70 <HAL_GPIO_Init+0x2d0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d863      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 8002a06:	4a9b      	ldr	r2, [pc, #620]	; (8002c74 <HAL_GPIO_Init+0x2d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d046      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
 8002a0c:	4a99      	ldr	r2, [pc, #612]	; (8002c74 <HAL_GPIO_Init+0x2d4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d85d      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 8002a12:	2b12      	cmp	r3, #18
 8002a14:	d82a      	bhi.n	8002a6c <HAL_GPIO_Init+0xcc>
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	d859      	bhi.n	8002ace <HAL_GPIO_Init+0x12e>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_GPIO_Init+0x80>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a9b 	.word	0x08002a9b
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a87 	.word	0x08002a87
 8002a2c:	08002ac9 	.word	0x08002ac9
 8002a30:	08002acf 	.word	0x08002acf
 8002a34:	08002acf 	.word	0x08002acf
 8002a38:	08002acf 	.word	0x08002acf
 8002a3c:	08002acf 	.word	0x08002acf
 8002a40:	08002acf 	.word	0x08002acf
 8002a44:	08002acf 	.word	0x08002acf
 8002a48:	08002acf 	.word	0x08002acf
 8002a4c:	08002acf 	.word	0x08002acf
 8002a50:	08002acf 	.word	0x08002acf
 8002a54:	08002acf 	.word	0x08002acf
 8002a58:	08002acf 	.word	0x08002acf
 8002a5c:	08002acf 	.word	0x08002acf
 8002a60:	08002acf 	.word	0x08002acf
 8002a64:	08002a7d 	.word	0x08002a7d
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	4a82      	ldr	r2, [pc, #520]	; (8002c78 <HAL_GPIO_Init+0x2d8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a72:	e02c      	b.n	8002ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e029      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	3304      	adds	r3, #4
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e024      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	623b      	str	r3, [r7, #32]
          break;
 8002a8e:	e01f      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	330c      	adds	r3, #12
 8002a96:	623b      	str	r3, [r7, #32]
          break;
 8002a98:	e01a      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	623b      	str	r3, [r7, #32]
          break;
 8002aa6:	e013      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	611a      	str	r2, [r3, #16]
          break;
 8002aba:	e009      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002abc:	2308      	movs	r3, #8
 8002abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	615a      	str	r2, [r3, #20]
          break;
 8002ac6:	e003      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
          break;
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x130>
          break;
 8002ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d801      	bhi.n	8002ada <HAL_GPIO_Init+0x13a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	e001      	b.n	8002ade <HAL_GPIO_Init+0x13e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2bff      	cmp	r3, #255	; 0xff
 8002ae4:	d802      	bhi.n	8002aec <HAL_GPIO_Init+0x14c>
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_Init+0x152>
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	3b08      	subs	r3, #8
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	210f      	movs	r1, #15
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	401a      	ands	r2, r3
 8002b04:	6a39      	ldr	r1, [r7, #32]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8090 	beq.w	8002c40 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_GPIO_Init+0x2dc>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_GPIO_Init+0x2dc>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_GPIO_Init+0x2dc>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b38:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_GPIO_Init+0x2e0>)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a49      	ldr	r2, [pc, #292]	; (8002c84 <HAL_GPIO_Init+0x2e4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00d      	beq.n	8002b80 <HAL_GPIO_Init+0x1e0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <HAL_GPIO_Init+0x1dc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a47      	ldr	r2, [pc, #284]	; (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_GPIO_Init+0x1d8>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e004      	b.n	8002b82 <HAL_GPIO_Init+0x1e2>
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x1e2>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_GPIO_Init+0x1e2>
 8002b80:	2300      	movs	r3, #0
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b92:	493b      	ldr	r1, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x2e0>)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bba:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4933      	ldr	r1, [pc, #204]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	492d      	ldr	r1, [pc, #180]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4929      	ldr	r1, [pc, #164]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4923      	ldr	r1, [pc, #140]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	491f      	ldr	r1, [pc, #124]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4919      	ldr	r1, [pc, #100]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4915      	ldr	r1, [pc, #84]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	3301      	adds	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f aeaf 	bne.w	80029b4 <HAL_GPIO_Init+0x14>
  }
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	372c      	adds	r7, #44	; 0x2c
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	10320000 	.word	0x10320000
 8002c68:	10310000 	.word	0x10310000
 8002c6c:	10220000 	.word	0x10220000
 8002c70:	10210000 	.word	0x10210000
 8002c74:	10120000 	.word	0x10120000
 8002c78:	10110000 	.word	0x10110000
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40010800 	.word	0x40010800
 8002c88:	40010c00 	.word	0x40010c00
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	40010400 	.word	0x40010400

08002c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd2:	787b      	ldrb	r3, [r7, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cde:	e003      	b.n	8002ce8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	041a      	lsls	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	611a      	str	r2, [r3, #16]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e26c      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d14:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d00c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d20:	4b8f      	ldr	r3, [pc, #572]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d112      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5e>
 8002d2c:	4b8c      	ldr	r3, [pc, #560]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d10b      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3a:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d06c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x12c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d168      	bne.n	8002e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e246      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x76>
 8002d5c:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e02e      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b7b      	ldr	r3, [pc, #492]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7a      	ldr	r2, [pc, #488]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a77      	ldr	r2, [pc, #476]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0xbc>
 8002d96:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a71      	ldr	r2, [pc, #452]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xd4>
 8002db0:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6a      	ldr	r2, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a67      	ldr	r2, [pc, #412]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fcce 	bl	8002770 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fcca 	bl	8002770 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1fa      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xe4>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fcba 	bl	8002770 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff fcb6 	bl	8002770 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1e6      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x10c>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d063      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d11c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x18c>
 8002e46:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x176>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e1ba      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4939      	ldr	r1, [pc, #228]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7ff fc6f 	bl	8002770 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff fc6b 	bl	8002770 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e19b      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4927      	ldr	r1, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff fc4e 	bl	8002770 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7ff fc4a 	bl	8002770 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e17a      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03a      	beq.n	8002f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f10:	f7ff fc2e 	bl	8002770 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff fc2a 	bl	8002770 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e15a      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 fa9a 	bl	8003470 <RCC_Delay>
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7ff fc14 	bl	8002770 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4a:	e00f      	b.n	8002f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7ff fc10 	bl	8002770 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d908      	bls.n	8002f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e140      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	42420000 	.word	0x42420000
 8002f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	4b9e      	ldr	r3, [pc, #632]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e9      	bne.n	8002f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a6 	beq.w	80030d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b97      	ldr	r3, [pc, #604]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b94      	ldr	r3, [pc, #592]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a93      	ldr	r2, [pc, #588]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	4b91      	ldr	r3, [pc, #580]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b8e      	ldr	r3, [pc, #568]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a8a      	ldr	r2, [pc, #552]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7ff fbd1 	bl	8002770 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7ff fbcd 	bl	8002770 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0fd      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x312>
 8002ff8:	4b7b      	ldr	r3, [pc, #492]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e02d      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x334>
 800300e:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6213      	str	r3, [r2, #32]
 800301a:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a72      	ldr	r2, [pc, #456]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	e01c      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x356>
 8003030:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4a6c      	ldr	r2, [pc, #432]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	e00b      	b.n	8003062 <HAL_RCC_OscConfig+0x36e>
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6213      	str	r3, [r2, #32]
 8003056:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a63      	ldr	r2, [pc, #396]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d015      	beq.n	8003096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7ff fb81 	bl	8002770 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7ff fb7d 	bl	8002770 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0ab      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ee      	beq.n	8003072 <HAL_RCC_OscConfig+0x37e>
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff fb6b 	bl	8002770 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7ff fb67 	bl	8002770 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e095      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a47      	ldr	r2, [pc, #284]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8081 	beq.w	80031de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d061      	beq.n	80031ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d146      	bne.n	800317e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7ff fb3b 	bl	8002770 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7ff fb37 	bl	8002770 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e067      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003110:	4b35      	ldr	r3, [pc, #212]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d108      	bne.n	8003138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a19      	ldr	r1, [r3, #32]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	430b      	orrs	r3, r1
 800314a:	4927      	ldr	r1, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7ff fb0b 	bl	8002770 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315e:	f7ff fb07 	bl	8002770 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e037      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x46a>
 800317c:	e02f      	b.n	80031de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <HAL_RCC_OscConfig+0x4fc>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff faf4 	bl	8002770 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff faf0 	bl	8002770 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e020      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x498>
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42420060 	.word	0x42420060

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d0      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4965      	ldr	r1, [pc, #404]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0b8      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	494d      	ldr	r1, [pc, #308]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d040      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d115      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e073      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06b      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4936      	ldr	r1, [pc, #216]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7ff fa44 	bl	8002770 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7ff fa40 	bl	8002770 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e053      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d210      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4922      	ldr	r1, [pc, #136]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e032      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4916      	ldr	r1, [pc, #88]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003382:	f000 f821 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003386:	4602      	mov	r2, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	490a      	ldr	r1, [pc, #40]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	5ccb      	ldrb	r3, [r1, r3]
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1cc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f9a2 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08003cd4 	.word	0x08003cd4
 80033c0:	20000098 	.word	0x20000098
 80033c4:	2000009c 	.word	0x2000009c

080033c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x30>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x36>
 80033f6:	e027      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	e027      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0c5b      	lsrs	r3, r3, #17
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	fb02 f203 	mul.w	r2, r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e004      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xa4>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	613b      	str	r3, [r7, #16]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	693b      	ldr	r3, [r7, #16]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	08003ce4 	.word	0x08003ce4
 8003468:	08003cf4 	.word	0x08003cf4
 800346c:	003d0900 	.word	0x003d0900

08003470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <RCC_Delay+0x34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <RCC_Delay+0x38>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800348c:	bf00      	nop
  }
  while (Delay --);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <RCC_Delay+0x1c>
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000098 	.word	0x20000098
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e041      	b.n	8003542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff f872 	bl	80025bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f000 fa56 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e035      	b.n	80035d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_TIM_Base_Start_IT+0x90>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIM_Base_Start_IT+0x4e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d004      	beq.n	800359a <HAL_TIM_Base_Start_IT+0x4e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <HAL_TIM_Base_Start_IT+0x94>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d111      	bne.n	80035be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d010      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	e007      	b.n	80035ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0202 	mvn.w	r2, #2
 8003618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f998 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f98b 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f99a 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f972 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f965 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f974 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0208 	mvn.w	r2, #8
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f94c 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f93f 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f94e 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0210 	mvn.w	r2, #16
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2208      	movs	r2, #8
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f926 	bl	8003964 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f919 	bl	8003952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f928 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0201 	mvn.w	r2, #1
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe fbe6 	bl	8001f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa6f 	bl	8003c52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8f8 	bl	8003988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0220 	mvn.w	r2, #32
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fa42 	bl	8003c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x1c>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0b4      	b.n	800394a <HAL_TIM_ConfigClockSource+0x186>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d03e      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xd4>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	f200 8087 	bhi.w	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	f000 8086 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x172>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d87f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d01a      	beq.n	800386a <HAL_TIM_ConfigClockSource+0xa6>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d87b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d050      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x11a>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d877      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d03c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0xfa>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d873      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d058      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x13a>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d86f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d064      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d86b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d060      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d867      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b10      	cmp	r3, #16
 8003866:	d05a      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	e062      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f000 f96a 	bl	8003b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e04f      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f000 f953 	bl	8003b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	609a      	str	r2, [r3, #8]
      break;
 80038bc:	e03c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f8ca 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2150      	movs	r1, #80	; 0x50
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f921 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 80038dc:	e02c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f8e8 	bl	8003ac0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f911 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 80038fc:	e01c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f8aa 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f901 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800391c:	e00c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 f8f8 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 800392e:	e003      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e000      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
	...

0800399c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <TIM_Base_SetConfig+0xc0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x28>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x28>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <TIM_Base_SetConfig+0xc4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <TIM_Base_SetConfig+0xc0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x52>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x52>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <TIM_Base_SetConfig+0xc4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <TIM_Base_SetConfig+0xc0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]
  }
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40000400 	.word	0x40000400

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0210 	bic.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f043 0307 	orr.w	r3, r3, #7
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b087      	sub	sp, #28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	609a      	str	r2, [r3, #8]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e041      	b.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d004      	beq.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10c      	bne.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400

08003c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2600      	movs	r6, #0
 8003c68:	4d0c      	ldr	r5, [pc, #48]	; (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	f000 f822 	bl	8003cbc <_init>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08003cf8 	.word	0x08003cf8
 8003ca0:	08003cf8 	.word	0x08003cf8
 8003ca4:	08003cf8 	.word	0x08003cf8
 8003ca8:	08003cfc 	.word	0x08003cfc

08003cac <memset>:
 8003cac:	4603      	mov	r3, r0
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
